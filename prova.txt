CHANGES.txt:   * Added language string for comments: generic_comment:on
CHANGES.txt:  * BC: upgrade shows comments consistently in activity stream
CHANGES.txt:  Please post your feedback, questions, and comments to the community site
ChangeLog:  comment language for brief display of comments - made it easier to translate
ChangeLog:  	* engine/lib/upgrades/2010121602.php: fixes river upgrade for comments
ChangeLog:  views/default/page/elements/comments.php: Fixes #4691 not passing name to the
ChangeLog:  	* actions/comments/delete.php: Fixes #4480: Forward to REFERER after comment
ChangeLog:  	* views/default/page/elements/comments.php: Fixes #4509: Remove invalid
ChangeLog:  engine/lib/plugins.php, engine/lib/users.php: most of the comments in the
ChangeLog:  engine/lib/river.php: coding standards fixes - comments
ChangeLog:  	* engine/lib/annotations.php: Fixes #4025 added a url handler for comments
ChangeLog:  views/rss/page/elements/comments.php, views/rss/river/item.php,
ChangeLog:  for generic comments (delete) and default annotations (empty).
ChangeLog:  views with comments
ChangeLog:  views/default/forms/avatar/upload.php, views/default/forms/comments/add.php,
ChangeLog:  mod/embed/views/default/js/embed/embed.php: updated based on Brett's comments
ChangeLog:  	* engine/classes/ElggMenuItem.php: Add param description to PHPDoc comments
ChangeLog:  views/default/forms/avatar/upload.php, views/default/forms/comments/add.php,
ChangeLog:  Fix for comment hook returning 0 comments.  
ChangeLog:  views/default/page/elements/comments_block.php: Fixes #3457 showing a snippet
ChangeLog:  #3241 cleaned up comments on upgrades and removed the turning off of time
ChangeLog:  	* htaccess_dist: Refs #2940 added php settings comments into trunk  
ChangeLog:  	* mod/file/languages/en.php: added missing language string for comments on
ChangeLog:  	* views/default/page/elements/comments_block.php: Fixes #2090 context
ChangeLog:  views/default/page/elements/comments_block.php: Refs #2090 added sidebar
ChangeLog:  comments to bookmarks sidebar  
ChangeLog:  views/default/page/elements/comments.php,
ChangeLog:  views/default/page/elements/comments_block.php: Refs #2090 removed
ChangeLog:  elgg_view_latest_comments() and replaced it with a page elements view  
ChangeLog:  	* engine/lib/deprecated-1.8.php: Fixes #3190. Added elgg_count_comments() to
ChangeLog:  	* views/default/forms/comments/add.php,
ChangeLog:  -> river/elements/footer for comments.  
ChangeLog:  	* engine/lib/views.php, views/default/page/elements/comments.php: Refs #3085
ChangeLog:  added $vars to elgg_view_comments()  
ChangeLog:  	* views/default/forms/comments/add.php: put margin back between longtext and
ChangeLog:  	* views/default/forms/comments/inline.php: Deprecated forms/comments/inline
ChangeLog:  in favor of passing inline => TRUE to forms/comments/add 
ChangeLog:  	* views/default/forms/comments/add.php: Dry'ed up forms/comments/add a bit 
ChangeLog:  	* views/default/forms/comments/add.php: merged comments/inline and
ChangeLog:  comments/add forms 
ChangeLog:  	* languages/en.php: updated language string for comments  
ChangeLog:  views/default/forms/comments/add.php,
ChangeLog:  views/default/page/elements/comments.php: improved the styling of the comment
ChangeLog:  	* views/default/page/elements/comments.php: another work around to suppress
ChangeLog:  views/default/layout/elements/comments.php,
ChangeLog:  views/default/page/elements/comments.php,
ChangeLog:  views/default/forms/comments/add.php,
ChangeLog:  views/default/forms/comments/inline.php,
ChangeLog:  views/default/layout/elements/comments.php,
ChangeLog:  	* actions/comments/delete.php, actions/likes/delete.php,
ChangeLog:  views/default/layout/elements/comments.php: Refs #650. Replaced
ChangeLog:  views/default/forms/comments/add.php, views/default/forms/friends/edit.php,
ChangeLog:  nonsensical comments 
ChangeLog:  	* mod/search/start.php, .../views/default/search/comments/entity.php,
ChangeLog:  .../views/default/search/comments/entity.php,
ChangeLog:  mod/search/views/rss/search/comments/entity.php,
ChangeLog:  elgg_count_comments() in change to ->countComments()  
ChangeLog:  views/default/core/likes/display.php: moved the count comments and likes
ChangeLog:  changes based on Evan's comments  
ChangeLog:  	* engine/lib/views.php: fixed the function for viewing latest comments  
ChangeLog:  mod/riverdashboard/endpoint/get_comments.php,
ChangeLog:  views/default/layout/elements/comments.php: supporting id for comments for in
ChangeLog:  new river display code - javascript code currently broken for comments and
ChangeLog:  	* actions/comments/add.php, engine/lib/upgrades/2010121602.php,
ChangeLog:  views/default/forms/comments/inline.php: Refs #2226 moving riverdashboard
ChangeLog:  	* views/default/comments/latest.php: comment views have been moved  
ChangeLog:  views/default/annotation/list.php, views/default/comments/list.php,
ChangeLog:  views/default/layout/elements/comments.php,
ChangeLog:  views/default/annotation/list.php, views/default/comments/forms/edit.php,
ChangeLog:  views/default/forms/comments/add.php,
ChangeLog:  views/default/layout_elements/media.php: comments use the media view now  
ChangeLog:  views/default/comments/latest.php, views/default/css/screen.php,
ChangeLog:  views/default/annotation/latest_comments.php,
ChangeLog:  views/default/comments/latest.php, views/default/css/screen.php,
ChangeLog:  is being used in the new latest comments module  
ChangeLog:  views/default/annotation/latest_comments.php, views/default/css/screen.php,
ChangeLog:  views/default/annotation/latest_comments.php, views/default/css/screen.php,
ChangeLog:  mod/riverdashboard/endpoint/get_comments.php,
ChangeLog:  .../views/default/search/comments/entity.php,
ChangeLog:  views/default/annotation/latest_comments.php,
ChangeLog:  views/default/annotation/likes.php, views/default/comments/forms/edit.php,
ChangeLog:  actions/admin/user/unban.php, actions/comments/add.php,
ChangeLog:  engine/classes/ElggEntity.php: Added comments to several undocumented methods
ChangeLog:  	* js/lib/ajax.js: Various tweaks to coding style + comments (apologies for
ChangeLog:  tweaks to comments, code style, etc. 
ChangeLog:  .../views/default/search/comments/entity.php,
ChangeLog:  mod/search/views/rss/search/comments/entity.php, mod/tagcloud/tagcloud.php,
ChangeLog:  actions/admin/user/resetpassword.php, actions/comments/add.php,
ChangeLog:  mod/riverdashboard/endpoint/get_comments.php,
ChangeLog:  .../views/default/search/comments/entity.php,
ChangeLog:  views/default/annotation/latest_comments.php,
ChangeLog:  views/default/comments/forms/edit.php, views/default/friends/forms/edit.php,
ChangeLog:  actions/comments/add.php, actions/comments/delete.php,
ChangeLog:  views/default/annotation/latest_comments.php,
ChangeLog:  views/default/comments/forms/edit.php, views/default/css.php,
ChangeLog:  actions/admin/plugins/simple_update_states.php, actions/comments/add.php,
ChangeLog:  	* COPYRIGHT.txt, actions/admin/menu_items.php, actions/comments/add.php,
ChangeLog:  actions/comments/delete.php, actions/entities/delete.php,
ChangeLog:  .../views/default/search/comments/entity.php,
ChangeLog:  mod/search/views/rss/search/comments/entity.php,
ChangeLog:  views/default/comments/forms/edit.php, views/default/dashboard/blurb.php,
ChangeLog:  mod/riverdashboard/endpoint/get_comments.php,
ChangeLog:  mod/riverdashboard/endpoint/get_comments.php,
ChangeLog:  .../views/default/search/comments/entity.php,
ChangeLog:  views/default/annotation/latest_comments.php,
ChangeLog:  	* views/default/css.php: Updated sidebar comments text overflow 
ChangeLog:  comments and likes via the activity stream. 
ChangeLog:  comments so this has been changed and a full group activity stream added. For
ChangeLog:  	* engine/lib/views.php: included an option to display existing comments but
ChangeLog:  	* .../views/default/river/item/wrapper.php: Activity stream comments now
ChangeLog:  comments.  
ChangeLog:  	* mod/riverdashboard/endpoint/get_comments.php,
ChangeLog:  comments link 
ChangeLog:  	* mod/riverdashboard/endpoint/get_comments.php,
ChangeLog:  Added ajax grabbing of all comments when clicking more link.   
ChangeLog:  there are comments 
ChangeLog:  	* mod/blog/blog_lib.php: check to see if comments are on or off 
ChangeLog:  comments and likes on profile activity. 
ChangeLog:  views/default/comments/forms/edit.php, views/default/css.php,
ChangeLog:  	* mod/groups/start.php: Cleaned up some comments about group acl hooks.  
ChangeLog:  	* .../views/default/river/object/blog/create.php: remove likes and comments
ChangeLog:  blog object view from comments.  
ChangeLog:  'customization' category to manifest. Cleaned up some comments.  
ChangeLog:  generic_comments for replies so no need for the extra logic in the river
ChangeLog:  display of comments and likes (the loading of these needs to be moved to ajax
ChangeLog:  mod/search/views/rss/search/comments/entity.php,
ChangeLog:  	* views/default/annotation/latest_comments.php: small lang tweak 
ChangeLog:  	* languages/en.php, views/default/comments/forms/edit.php: Updated generic
ChangeLog:  	* .../views/default/search/comments/entity.php,
ChangeLog:  comments.  
ChangeLog:  	* actions/comments/add.php, actions/comments/delete.php,
ChangeLog:  views/default/annotation/latest_comments.php, views/default/css.php: Updated
ChangeLog:  latest comments to new UI and coding standards, and added to Blog and Files
ChangeLog:  	* views/default/css.php: Updates to generic comments 
ChangeLog:  views/default/annotation/latest_comments.php, views/default/css.php:
ChangeLog:  Updated/cleaned-up generic comments with new UI. 
ChangeLog:  views/default/comments/forms/edit.php: Updated interface on new blog
ChangeLog:  	* .../views/default/search/comments/entity.php,
ChangeLog:  views/default/annotation/latest_comments.php,
ChangeLog:  views/default/comments/forms/edit.php, views/default/css.php,
ChangeLog:  actions/comments/add.php, actions/friends/add.php,
ChangeLog:  .../views/default/search/comments/entity.php,
ChangeLog:  .../views/default/search/comments/listing.php,
ChangeLog:  	* actions/comments/add.php: add comment action now using get_loggedin_user()
ChangeLog:  	* engine/lib/input.php: added comments on get_input and set_input since they
ChangeLog:  	* actions/comments/add.php, languages/en.php: fixes #1018 - blank comments
ChangeLog:  comments in search.  
ChangeLog:  	* .../views/default/search/comments/listing.php,
ChangeLog:  	* .../views/default/search/comments/listing.php,
ChangeLog:  	* mod/search/views/default/search/listing.php: Added pagination to comments
ChangeLog:  	* .../views/default/search/comments/listing.php,
ChangeLog:  	* .../views/default/search/comments/listing.php,
ChangeLog:  	* .../views/default/search/comments/listing.php,
ChangeLog:  	* .../views/default/search/comments/listing.php,
ChangeLog:  .../views/default/search/comments/listing.php,
ChangeLog:  	* .../views/default/search/comments/listing.php: Fixed the wrapper for
ChangeLog:  .../views/default/search/comments/listing.php,
ChangeLog:  for searching comments.  
ChangeLog:  comments in the db upgrade now that I know what they are.  
ChangeLog:  views/default/comments/forms/edit.php, views/default/dashboard/blurb.php,
ChangeLog:  	* actions/comments/add.php, actions/comments/delete.php: Standardized.  
ChangeLog:  	* actions/comments/add.php, engine/lib/annotations.php,
ChangeLog:  actions/admin/user/ban.php, actions/comments/add.php,
ChangeLog:  actions/comments/delete.php, actions/email/save.php, actions/friends/add.php,
ChangeLog:  views/default/comments/forms/edit.php, views/default/dashboard/blurb.php,
ChangeLog:  actions/admin/user/unban.php, actions/comments/add.php,
ChangeLog:  actions/comments/delete.php, actions/email/save.php,
ChangeLog:  views/default/comments/forms/edit.php, views/default/css.php,
ChangeLog:  	* engine/lib/database.php: Corrected unnecessarily patriotic comments. 
ChangeLog:  views/default/comments/forms/edit.php, views/default/css.php: input/longtext
ChangeLog:  can now edit and delete their forum comments 
ChangeLog:  	* actions/comments/add.php, views/default/annotation/annotate.php: new
ChangeLog:  views/default/comments/forms/edit.php, views/default/export/entity.php: loose
ChangeLog:  actions/comments/add.php, actions/comments/delete.php,
ChangeLog:  views/default/comments/forms/edit.php, views/default/css.php,
ChangeLog:  functionality: comments, tabs and drill down ability. 
ChangeLog:  	* views/default/comments/forms/edit.php: removed ratings hook from comments.
ChangeLog:  	* views/default/comments/forms/edit.php: ratings hook added to comments
ChangeLog:  	* actions/comments/add.php, views/default/comments/forms/edit.php: Refs #210
ChangeLog:  & #211 : Updated comments form 
ChangeLog:  views/default/comments/forms/edit.php, views/default/export/entity.php,
ChangeLog:  comments etc no longer display "none found" if there aren't any. 
ChangeLog:  now appear as comments for debugging. 
ChangeLog:  	* actions/comments/add.php, actions/comments/delete.php,
ChangeLog:  	* engine/lib/elgglib.php: Added a plugin hook for counting comments. 
ChangeLog:  	* engine/lib/elgglib.php, views/default/comments/forms/edit.php: Fixed
ChangeLog:  comments! 
ChangeLog:  handle comments instead 
ChangeLog:  	* views/default/comments/forms/edit.php: The comment form only appears if
ChangeLog:  	* actions/comments/add.php, engine/lib/notification.php, languages/en.php:
ChangeLog:  Introducing notifications on generic comments. 
ChangeLog:  	* views/default/css.php: moved generic comments css from plugin to core 
ChangeLog:  	* views/default/comments/forms/edit.php: removed the title from generic
ChangeLog:  comments 
ChangeLog:  	* views/default/css.php: generic comments moved/cleaned 
ChangeLog:  menu, single view layout, and comments all updated 
ChangeLog:  	* languages/en.php: Some more translations for comments 
ChangeLog:  	* engine/lib/elgglib.php: Introducing elgg_count_comments 
ChangeLog:  views/default/comments/forms/edit.php, views/default/css.php: Tweaks to
ChangeLog:  	* actions/comments/add.php, actions/comments/delete.php,
ChangeLog:  views/default/comments/forms/edit.php: Brought generic comments into Elgg
ChangeLog:  languages/en.php: Refs #78: Email notifications on friending, comments
ChangeLog:  mod/blog/actions/comments/add.php, mod/blog/actions/comments/delete.php,
ChangeLog:  mod/blog/views/default/object/blog-comments.php,
ChangeLog:  comments issue in blogs. 
ChangeLog:  	* mod/blog/actions/comments/delete.php, mod/blog/languages/en.php,
ChangeLog:  mod/blog/views/default/object/blog-comments.php,
ChangeLog:  delete on comments 
ChangeLog:  	* mod/blog/actions/comments/add.php, mod/blog/languages/en.php,
ChangeLog:  mod/blog/views/default/object/blog-comments.php,
ChangeLog:  mod/blog/views/default/object/blog.php: Added comments to blog 
ChangeLog:  comments 
documentation/coding_standards/best_practices.txt:* 	Use comments effectively.  Good comments describe the "why."  Good code
documentation/coding_standards/php_coding_standards.txt:* 	PHPDoc comments on functions and classes (all methods; declared properties
engine/lib/database.php:		// Remove MySQL -- style comments
engine/lib/deprecated-1.8.php: * Count the number of comments attached to an entity
engine/lib/deprecated-1.8.php: * @return int Number of comments
engine/lib/deprecated-1.8.php:function elgg_count_comments($entity) {
engine/lib/deprecated-1.8.php:	elgg_deprecated_notice('elgg_count_comments() is deprecated by ElggEntity->countComments()', 1.8);
engine/lib/elgglib.php: * Handles core actions for comments, the JS pagehandler, and the shutdown function.
engine/lib/elgglib.php:	elgg_register_action('comments/add');
engine/lib/elgglib.php:	elgg_register_action('comments/delete');
engine/lib/navigation.php:		// comments and non-objects cannot be commented on or liked
engine/lib/navigation.php:			// comments
engine/lib/navigation.php:					'href' => "#comments-add-$object->guid",
engine/lib/navigation.php:		$url = elgg_http_add_url_query_elements('action/comments/delete', array(
engine/lib/views.php: * Returns rendered comments and a comment form for an entity.
engine/lib/views.php: * for the comments, $entity_type hook.  The handler is responsible
engine/lib/views.php: * for formatting the comments and the add comment form.
engine/lib/views.php: * @param ElggEntity $entity      The entity to view comments of
engine/lib/views.php: * @param bool       $add_comment Include a form to add comments?
engine/lib/views.php: * @return string|false Rendered comments or false on failure
engine/lib/views.php:function elgg_view_comments($entity, $add_comment = true, array $vars = array()) {
engine/lib/views.php:	$vars['class'] = elgg_extract('class', $vars, "{$entity->getSubtype()}-comments");
engine/lib/views.php:	$output = elgg_trigger_plugin_hook('comments', $entity->getType(), $vars, false);
engine/lib/views.php:		return elgg_view('page/elements/comments', $vars);
engine/classes/ElggAutoP.php:		// strip AUTOPs that only have comments/whitespace
engine/classes/ElggEntity.php:	 * Count the number of comments attached to this entity.
engine/classes/ElggEntity.php:	 * @return int Number of comments
engine/classes/ElggEntity.php:		$num = elgg_trigger_plugin_hook('comments:count', $this->getType(), $params);
languages/it.php:  'river:comments:more' => '+%u altro',
languages/it.php:  'generic_comments:post' => 'Posta il commento',
languages/it.php:  'generic_comments:latest' => 'Ultimi commenti',
languages/it.php:  'comments' => 'Commenti',
languages/it.php:  'comments:count' => '%s commenti',
languages/it.php:  'generic_comments:add' => 'Inserisci un commento',
languages/it.php:  'generic_comments:text' => 'Commento',
languages/en.php:	'river:comments:more' => '+%u more',
languages/en.php:	'comments' => 'Comments',
languages/en.php:	'comments:count' => "%s comments",
languages/en.php:	'generic_comments:add' => "Leave a comment",
languages/en.php:	'generic_comments:post' => "Post comment",
languages/en.php:	'generic_comments:text' => "Comment",
languages/en.php:	'generic_comments:latest' => "Latest comments",
languages/en.php:	'generic_comment:none' => 'No comments',
mod/search/README.txt:comments) but if a plugin needs to match against metadata, 
mod/search/views/default/search/list.php: * or search type (comments for example)
mod/search/views/default/search/list.php: *                          - 'search_type' Type of search: 'entities', 'comments', 'tags'
mod/search/views/default/search/list.php:	$title_key = ($more == 1) ? 'comment' : 'comments';
mod/search/views/default/search/comments/entity.php:// @todo Sometimes we find comments on entities we can't display...
mod/search/views/rss/search/comments/entity.php:// @todo Sometimes we find comments on entities we can't display...
mod/search/search_hooks.php: * Return default results for searches on comments.
mod/search/search_hooks.php:function search_comments_hook($hook, $type, $value, $params) {
mod/search/search_hooks.php:	$comments = get_data($q);
mod/search/search_hooks.php:	// to be invalid and there are comments on entities of those subtypes,
mod/search/search_hooks.php:	foreach ($comments as $comment) {
mod/search/search_hooks.php: * Register comments as a custom search type.
mod/search/search_hooks.php:function search_custom_types_comments_hook($hook, $type, $value, $params) {
mod/search/search_hooks.php:	$value[] = 'comments';
mod/search/languages/en.php:	'search_types:comments' => 'Comments',
mod/search/start.php:	// tags and comments are a bit different.
mod/search/start.php:	elgg_register_plugin_hook_handler('search_types', 'get_types', 'search_custom_types_comments_hook');
mod/search/start.php:	elgg_register_plugin_hook_handler('search', 'comments', 'search_comments_hook');
mod/polls/pages/read.php:	// Get any comments
mod/polls/pages/read.php:			$comments = $pollpost->getAnnotations('comments');
mod/polls/pages/read.php:											'comments' => $comments,
mod/polls/views/default/object/poll.php:				<!-- display the comments link -->
mod/polls/views/default/object/poll.php:				//get the number of comments
mod/polls/views/default/object/poll.php:				$num_comments = elgg_count_comments($vars['entity']);
mod/polls/views/default/object/poll.php:			<a href="<?php echo $vars['entity']->getURL(); ?>"><?php echo sprintf(elgg_echo("comments")) . " (" . $num_comments . ")"; ?></a><BR>		
mod/polls/views/default/object/poll.php:				echo elgg_view_comments($vars['entity']);
mod/mood/read.php:	// Get any comments
mod/mood/read.php:			//$comments = $moodpost->getAnnotations('comments');
mod/mood/read.php:											'comments' => $comments,
mod/bookmarks/pages/bookmarks/view.php:$content .= elgg_view_comments($bookmark);
mod/bookmarks/views/default/bookmarks/sidebar.php:echo elgg_view('page/elements/comments_block', array(
mod/bookmarks/views/default/object/bookmarks.php:$comments_count = $bookmark->countComments();
mod/bookmarks/views/default/object/bookmarks.php:if ($comments_count != 0) {
mod/bookmarks/views/default/object/bookmarks.php:	$text = elgg_echo("comments") . " ($comments_count)";
mod/bookmarks/views/default/object/bookmarks.php:	$comments_link = elgg_view('output/url', array(
mod/bookmarks/views/default/object/bookmarks.php:		'href' => $bookmark->getURL() . '#comments',
mod/bookmarks/views/default/object/bookmarks.php:	$comments_link = '';
mod/bookmarks/views/default/object/bookmarks.php:$subtitle = "$author_text $date $comments_link $categories";
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; &#160; <span class="toc-item"><a href="#s3.3.1"><span class="item-no">3.3.1</span>&#160; HTML comments and <span class="term">CDATA</span>&#160;sections</a></span><br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; * &#160;Filtering of text submitted as comments on blogs to allow only certain HTML elements<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; * &#160;HTML <strong>comments</strong>&#160;and <span class="term">CDATA</span>&#160;sections can be permitted &#160;^~`<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; By default, htmLawed will process the text allowing all valid HTML elements/tags, secure URL scheme/CSS style properties, etc. It will allow <span class="term">CDATA</span>&#160;sections and HTML comments, balance tags, and ensure proper nesting of elements. Such actions can be configured using two other optional arguments -- <span class="term">$config</span>&#160;and <span class="term">$spec</span>:<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; Handling of HTML comments; see <a href="#s3.3.1">section 3.3.1</a><br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; <span class="term">0</span>&#160;- don't consider comments as markup and proceed as if plain text &#160;^"<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; * &#160;Allowing HTML comments (some Internet Explorer versions are vulnerable with, e.g., <span class="term">&lt;!--[if gte IE 4]&gt;&lt;script&gt;alert("xss");&lt;/script&gt;&lt;![endif]--&gt;</span><br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; * &#160;HTML comments should not be inside element tags (okay between tags), and should begin with <span class="term">&lt;!--</span>&#160;and end with <span class="term">--&gt;</span>. Characters like <span class="term">&lt;</span>, <span class="term">&gt;</span>, and <span class="term">&amp;</span>&#160;may be allowed inside depending on <span class="term">$config</span>, but any <span class="term">--&gt;</span>&#160;inside should be put in as <span class="term">--&amp;gt;</span>. Any <span class="term">--</span>&#160;inside will be automatically converted to <span class="term">-</span>, and a space will be added before the comment delimiter <span class="term">--&gt;</span>.<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; <strong>1.</strong>&#160;A blog administrator wants to allow only <span class="term">a</span>, <span class="term">em</span>, <span class="term">strike</span>, <span class="term">strong</span>&#160;and <span class="term">u</span>&#160;in comments, but needs <span class="term">strike</span>&#160;and <span class="term">u</span>&#160;transformed to <span class="term">span</span>&#160;for better XHTML 1-strict compliance, and, he wants the <span class="term">a</span>&#160;links to be to <span class="term">http</span>&#160;or <span class="term">https</span>&#160;resources:<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:<a name="s3.3.1" id="s3.3.1"></a><span class="item-no">3.3.1</span>&#160; Handling of comments and CDATA sections
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; <span class="term">CDATA</span>&#160;sections have the format <span class="term">&lt;![CDATA[...anything but not "]]&gt;"...]]&gt;</span>, and HTML comments, <span class="term">&lt;!--...anything but not "--&gt;"... --&gt;</span>. Neither HTML comments nor <span class="term">CDATA</span>&#160;sections can reside inside tags. HTML comments can exist anywhere else, but <span class="term">CDATA</span>&#160;sections can exist only where plain text is allowed (e.g., immediately inside <span class="term">td</span>&#160;element content but not immediately inside <span class="term">tr</span>&#160;element content).<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; htmLawed (function <span class="term">hl_cmtcd()</span>) handles HTML comments or <span class="term">CDATA</span>&#160;sections depending on the values of <span class="term">$config["comment"]</span>&#160;or <span class="term">$config["cdata"]</span>. If <span class="term">0</span>, such markup is not looked for and the text is processed like plain text. If <span class="term">1</span>, it is removed completely. If <span class="term">2</span>, it is preserved but any <span class="term">&lt;</span>, <span class="term">&gt;</span>&#160;and <span class="term">&amp;</span>&#160;inside are changed to entities. If <span class="term">3</span>, they are left as such.<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; Note that for the last two cases, HTML comments and <span class="term">CDATA</span>&#160;sections will always be removed from tag content (function <span class="term">hl_tag()</span>).<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; For standard-compliance, comments are given the form <span class="term">&lt;!--comment --&gt;</span>, and any <span class="term">--</span>&#160;in the content is made <span class="term">-</span>.<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; When <span class="term">$config["safe"] = 1</span>, CDATA sections and comments are considered plain text unless <span class="term">$config["comment"]</span>&#160;or <span class="term">$config["cdata"]</span>&#160;is explicitly specified; see <a href="#s3.6">section 3.6</a>.<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; With the <span class="term">$config</span>&#160;parameter <span class="term">tidy</span>, htmLawed can be used to beautify or compact the input text. Input with just plain text and no HTML markup is also subject to this. Besides <span class="term">pre</span>, the <span class="term">script</span>&#160;and <span class="term">textarea</span>&#160;elements, CDATA sections, and HTML comments are not subjected to the tidying process.<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; With the value of <span class="term">1</span>, htmLawed considers <span class="term">CDATA</span>&#160;sections and HTML comments as plain text, and prohibits the <span class="term">applet</span>, <span class="term">embed</span>, <span class="term">iframe</span>, <span class="term">object</span>&#160;and <span class="term">script</span>&#160;elements, and the <span class="term">on&#42;</span>&#160;attributes like <span class="term">onclick</span>. ( There are <span class="term">$config</span>&#160;parameters like <span class="term">css_expression</span>&#160;that are not affected by the value set for <span class="term">safe</span>&#160;but whose default values still contribute towards a more <em>safe</em>&#160;output.) Further, URLs with schemes (see <a href="#s3.4.3">section 3.4.3</a>) are neutralized so that, e.g., <span class="term">style="moz-binding&#58;url(http&#58;//danger)"</span>&#160;becomes <span class="term">style="moz-binding&#58;url(denied&#58;http&#58;//danger)"</span>.<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; If <span class="term">$config["hook"]</span>&#160;is not set to <span class="term">0</span>, then htmLawed will allow preliminarily processed input to be altered by a hook function named by <span class="term">$config["hook"]</span>&#160;before starting the main work (but after handling of characters, entities, HTML comments and <span class="term">CDATA</span>&#160;sections -- see code for function <span class="term">htmLawed()</span>).<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; * &#160;<span class="term">hl_cmtcd</span>&#160;- handling CDATA sections and HTML comments<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; <span class="term">htmLawed()</span>&#160;finalizes <span class="term">$spec</span>&#160;(with the help of <span class="term">hl_spec()</span>) and <span class="term">$config</span>, and globalizes them. Finalization of <span class="term">$config</span>&#160;involves setting default values if an inappropriate or invalid one is supplied. This includes calling <span class="term">hl_regex()</span>&#160;to check well-formedness of regular expression patterns if such expressions are user-supplied through <span class="term">$config</span>. <span class="term">htmLawed()</span>&#160;then removes invalid characters like nulls and <span class="term">x01</span>&#160;and appropriately handles entities using <span class="term">hl_ent()</span>. HTML comments and CDATA sections are identified and treated as per <span class="term">$config</span>&#160;with the help of <span class="term">hl_cmtcd()</span>. When retained, the <span class="term">&lt;</span>&#160;and <span class="term">&gt;</span>&#160;characters identifying them, and the <span class="term">&lt;</span>, <span class="term">&gt;</span>&#160;and <span class="term">&amp;</span>&#160;characters inside them, are replaced with control characters (code-points <span class="term">1</span>&#160;to <span class="term">5</span>) till any tag balancing is completed.<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; After this <em>initial processing</em>&#160;<span class="term">htmLawed()</span>&#160;identifies tags using regex and processes them with the help of <span class="term">hl_tag()</span>&#160;-- &#160;a large function that analyzes tag content, filtering it as per HTML standards, <span class="term">$config</span>&#160;and <span class="term">$spec</span>. Among other things, <span class="term">hl_tag()</span>&#160;transforms deprecated elements using <span class="term">hl_tag2()</span>, removes attributes from closing tags, checks attribute values as per <span class="term">$spec</span>&#160;rules using <span class="term">hl_attrval()</span>, and checks URL protocols using <span class="term">hl_prot()</span>. <span class="term">htmLawed()</span>&#160;performs tag balancing and nesting checks with a call to <span class="term">hl_bal()</span>, and optionally compacts/beautifies the output with proper white-spacing with a call to <span class="term">hl_tidy()</span>. The latter temporarily replaces white-space, and <span class="term">&lt;</span>, <span class="term">&gt;</span>&#160;and <span class="term">&amp;</span>&#160;characters inside <span class="term">pre</span>, <span class="term">script</span>&#160;and <span class="term">textarea</span>&#160;elements, and HTML comments and CDATA sections with control characters (code-points <span class="term">1</span>&#160;to <span class="term">5</span>, and <span class="term">7</span>).<br />
mod/htmlawed/vendors/htmLawed/htmLawed_README.htm:&#160; Being dictated by the external and stable HTML standard, htmLawed's objective is very clear-cut and less concerned with tweakability. The code is only minimally annotated with comments -- it is not meant to instruct; PHP developers familiar with the HTML specs will see the logic, and others can always refer to the htmLawed documentation. The compact structuring of the statements is meant to aid in quickly grasping the logic, at least when viewed with code syntax highlighted.
mod/htmlawed/vendors/htmLawed/htmLawedTest.php:'comment'=>array('4', 'nil', 'allow HTML comments', 'nil'),
mod/htmlawed/vendors/htmLawed/htmLawed_TESTCASE.txt:<h6>HTML comments (also CDATA)</h6>
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:    3.3.1  HTML comments and 'CDATA' sections
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  *  Filtering of text submitted as comments on blogs to allow only certain HTML elements
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  *  HTML *comments* and 'CDATA' sections can be permitted  ^~`
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  By default, htmLawed will process the text allowing all valid HTML elements/tags, secure URL scheme/CSS style properties, etc. It will allow 'CDATA' sections and HTML comments, balance tags, and ensure proper nesting of elements. Such actions can be configured using two other optional arguments -- '$config' and '$spec':
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  Handling of HTML comments; see section:- #3.3.1
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  '0' - don't consider comments as markup and proceed as if plain text  ^"
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  *  Allowing HTML comments (some Internet Explorer versions are vulnerable with, e.g., '<!--[if gte IE 4]><script>alert("xss");</script><![endif]-->'
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  *  HTML comments should not be inside element tags (okay between tags), and should begin with '<!--' and end with '-->'. Characters like '<', '>', and '&' may be allowed inside depending on '$config', but any '-->' inside should be put in as '--&gt;'. Any '--' inside will be automatically converted to '-', and a space will be added before the comment delimiter '-->'.
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  *1.* A blog administrator wants to allow only 'a', 'em', 'strike', 'strong' and 'u' in comments, but needs 'strike' and 'u' transformed to 'span' for better XHTML 1-strict compliance, and, he wants the 'a' links to be to 'http' or 'https' resources:
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:.. 3.3.1  Handling of comments and CDATA sections ...................
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  'CDATA' sections have the format '<![CDATA[...anything but not "]]>"...]]>', and HTML comments, '<!--...anything but not "-->"... -->'. Neither HTML comments nor 'CDATA' sections can reside inside tags. HTML comments can exist anywhere else, but 'CDATA' sections can exist only where plain text is allowed (e.g., immediately inside 'td' element content but not immediately inside 'tr' element content).
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  htmLawed (function 'hl_cmtcd()') handles HTML comments or 'CDATA' sections depending on the values of '$config["comment"]' or '$config["cdata"]'. If '0', such markup is not looked for and the text is processed like plain text. If '1', it is removed completely. If '2', it is preserved but any '<', '>' and '&' inside are changed to entities. If '3', they are left as such.
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  Note that for the last two cases, HTML comments and 'CDATA' sections will always be removed from tag content (function 'hl_tag()').
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  For standard-compliance, comments are given the form '<!--comment -->', and any '--' in the content is made '-'.
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  When '$config["safe"] = 1', CDATA sections and comments are considered plain text unless '$config["comment"]' or '$config["cdata"]' is explicitly specified; see section:- #3.6.
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  With the '$config' parameter 'tidy', htmLawed can be used to beautify or compact the input text. Input with just plain text and no HTML markup is also subject to this. Besides 'pre', the 'script' and 'textarea' elements, CDATA sections, and HTML comments are not subjected to the tidying process.
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  With the value of '1', htmLawed considers 'CDATA' sections and HTML comments as plain text, and prohibits the 'applet', 'embed', 'iframe', 'object' and 'script' elements, and the 'on*' attributes like 'onclick'. ( There are '$config' parameters like 'css_expression' that are not affected by the value set for 'safe' but whose default values still contribute towards a more `safe` output.) Further, URLs with schemes (see section:- #3.4.3) are neutralized so that, e.g., 'style="moz-binding:url(http://danger)"' becomes 'style="moz-binding:url(denied:http://danger)"'.
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  If '$config["hook"]' is not set to '0', then htmLawed will allow preliminarily processed input to be altered by a hook function named by '$config["hook"]' before starting the main work (but after handling of characters, entities, HTML comments and 'CDATA' sections -- see code for function 'htmLawed()').
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  *  'hl_cmtcd' - handling CDATA sections and HTML comments
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  'htmLawed()' finalizes '$spec' (with the help of 'hl_spec()') and '$config', and globalizes them. Finalization of '$config' involves setting default values if an inappropriate or invalid one is supplied. This includes calling 'hl_regex()' to check well-formedness of regular expression patterns if such expressions are user-supplied through '$config'. 'htmLawed()' then removes invalid characters like nulls and 'x01' and appropriately handles entities using 'hl_ent()'. HTML comments and CDATA sections are identified and treated as per '$config' with the help of 'hl_cmtcd()'. When retained, the '<' and '>' characters identifying them, and the '<', '>' and '&' characters inside them, are replaced with control characters (code-points '1' to '5') till any tag balancing is completed.
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  After this `initial processing` 'htmLawed()' identifies tags using regex and processes them with the help of 'hl_tag()' --  a large function that analyzes tag content, filtering it as per HTML standards, '$config' and '$spec'. Among other things, 'hl_tag()' transforms deprecated elements using 'hl_tag2()', removes attributes from closing tags, checks attribute values as per '$spec' rules using 'hl_attrval()', and checks URL protocols using 'hl_prot()'. 'htmLawed()' performs tag balancing and nesting checks with a call to 'hl_bal()', and optionally compacts/beautifies the output with proper white-spacing with a call to 'hl_tidy()'. The latter temporarily replaces white-space, and '<', '>' and '&' characters inside 'pre', 'script' and 'textarea' elements, and HTML comments and CDATA sections with control characters (code-points '1' to '5', and '7').
mod/htmlawed/vendors/htmLawed/htmLawed_README.txt:  Being dictated by the external and stable HTML standard, htmLawed's objective is very clear-cut and less concerned with tweakability. The code is only minimally annotated with comments -- it is not meant to instruct; PHP developers familiar with the HTML specs will see the logic, and others can always refer to the htmLawed documentation. The compact structuring of the statements is meant to aid in quickly grasping the logic, at least when viewed with code syntax highlighted.
mod/group_tools/README.txt:	- has support for river_comments and like
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * Retrieves the comments of a community poll. (communityPollComments.list)
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * @param int $communityId The ID of the community whose poll is having its comments listed.
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * @opt_param string maxResults The maximum number of comments to include in the response.
mod/gdrive/vendor/google/contrib/apiOrkutService.php:   * The "comments" collection of methods.
mod/gdrive/vendor/google/contrib/apiOrkutService.php:   *   $comments = $orkutService->comments;
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * Inserts a new comment to an activity. (comments.insert)
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * Retrieves an existing comment. (comments.get)
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * Retrieves a list of comments, possibly filtered. (comments.list)
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * @param string $activityId The ID of the activity containing the comments.
mod/gdrive/vendor/google/contrib/apiOrkutService.php:     * Deletes an existing comment. (comments.delete)
mod/gdrive/vendor/google/contrib/apiOrkutService.php: * Lets you manage activities, comments and badges in Orkut. More stuff coming in time.
mod/gdrive/vendor/google/contrib/apiOrkutService.php:  public $comments;
mod/gdrive/vendor/google/contrib/apiOrkutService.php:    $this->communityPollComments = new CommunityPollCommentsServiceResource($this, $this->serviceName, 'communityPollComments', json_decode('{"methods": {"insert": {"scopes": ["https://www.googleapis.com/auth/orkut"], "parameters": {"communityId": {"format": "int32", "required": true, "type": "integer", "location": "path"}, "pollId": {"required": true, "type": "string", "location": "path"}}, "request": {"$ref": "CommunityPollComment"}, "id": "orkut.communityPollComments.insert", "httpMethod": "POST", "path": "communities/{communityId}/polls/{pollId}/comments", "response": {"$ref": "CommunityPollComment"}}, "list": {"scopes": ["https://www.googleapis.com/auth/orkut", "https://www.googleapis.com/auth/orkut.readonly"], "parameters": {"pageToken": {"type": "string", "location": "query"}, "communityId": {"format": "int32", "required": true, "type": "integer", "location": "path"}, "hl": {"type": "string", "location": "query"}, "maxResults": {"format": "uint32", "minimum": "1", "type": "integer", "location": "query"}, "pollId": {"required": true, "type": "string", "location": "path"}}, "id": "orkut.communityPollComments.list", "httpMethod": "GET", "path": "communities/{communityId}/polls/{pollId}/comments", "response": {"$ref": "CommunityPollCommentList"}}}}', true));
mod/gdrive/vendor/google/contrib/apiOrkutService.php:    $this->comments = new CommentsServiceResource($this, $this->serviceName, 'comments', json_decode('{"methods": {"insert": {"scopes": ["https://www.googleapis.com/auth/orkut"], "parameters": {"activityId": {"required": true, "type": "string", "location": "path"}}, "request": {"$ref": "Comment"}, "id": "orkut.comments.insert", "httpMethod": "POST", "path": "activities/{activityId}/comments", "response": {"$ref": "Comment"}}, "delete": {"scopes": ["https://www.googleapis.com/auth/orkut"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}}, "httpMethod": "DELETE", "path": "comments/{commentId}", "id": "orkut.comments.delete"}, "list": {"scopes": ["https://www.googleapis.com/auth/orkut", "https://www.googleapis.com/auth/orkut.readonly"], "parameters": {"orderBy": {"default": "DESCENDING_SORT", "enum": ["ascending", "descending"], "location": "query", "type": "string"}, "pageToken": {"type": "string", "location": "query"}, "activityId": {"required": true, "type": "string", "location": "path"}, "hl": {"type": "string", "location": "query"}, "maxResults": {"format": "uint32", "minimum": "1", "type": "integer", "location": "query"}}, "id": "orkut.comments.list", "httpMethod": "GET", "path": "activities/{activityId}/comments", "response": {"$ref": "CommentList"}}, "get": {"scopes": ["https://www.googleapis.com/auth/orkut", "https://www.googleapis.com/auth/orkut.readonly"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}, "hl": {"type": "string", "location": "query"}}, "id": "orkut.comments.get", "httpMethod": "GET", "path": "comments/{commentId}", "response": {"$ref": "Comment"}}}}', true));
mod/gdrive/vendor/google/contrib/apiPlusService.php:   * The "comments" collection of methods.
mod/gdrive/vendor/google/contrib/apiPlusService.php:   *   $comments = $plusService->comments;
mod/gdrive/vendor/google/contrib/apiPlusService.php:     * List all of the comments for an activity. (comments.list)
mod/gdrive/vendor/google/contrib/apiPlusService.php:     * @param string $activityId The ID of the activity to get comments for.
mod/gdrive/vendor/google/contrib/apiPlusService.php:     * @opt_param string maxResults The maximum number of comments to include in the response, used for paging. For any response, the actual number returned may be less than the specified maxResults.
mod/gdrive/vendor/google/contrib/apiPlusService.php:     * Get a comment. (comments.get)
mod/gdrive/vendor/google/contrib/apiPlusService.php:  public $comments;
mod/gdrive/vendor/google/contrib/apiPlusService.php:    $this->comments = new CommentsServiceResource($this, $this->serviceName, 'comments', json_decode('{"methods": {"list": {"scopes": ["https://www.googleapis.com/auth/plus.me"], "parameters": {"pageToken": {"type": "string", "location": "query"}, "activityId": {"required": true, "type": "string", "location": "path"}, "alt": {"default": "json", "enum": ["json"], "location": "query", "type": "string"}, "maxResults": {"format": "uint32", "default": "20", "maximum": "100", "minimum": "0", "location": "query", "type": "integer"}}, "id": "plus.comments.list", "httpMethod": "GET", "path": "activities/{activityId}/comments", "response": {"$ref": "CommentFeed"}}, "get": {"scopes": ["https://www.googleapis.com/auth/plus.me"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}}, "id": "plus.comments.get", "httpMethod": "GET", "path": "comments/{commentId}", "response": {"$ref": "Comment"}}}}', true));
mod/gdrive/vendor/google/contrib/apiBloggerService.php:   * The "comments" collection of methods.
mod/gdrive/vendor/google/contrib/apiBloggerService.php:   *   $comments = $bloggerService->comments;
mod/gdrive/vendor/google/contrib/apiBloggerService.php:     * Retrieves the comments for a blog, possibly filtered. (comments.list)
mod/gdrive/vendor/google/contrib/apiBloggerService.php:     * @param string $blogId ID of the blog to fetch comments from.
mod/gdrive/vendor/google/contrib/apiBloggerService.php:     * @opt_param string maxResults Maximum number of comments to include in the result.
mod/gdrive/vendor/google/contrib/apiBloggerService.php:     * @opt_param bool fetchBodies Whether the body content of the comments is included.
mod/gdrive/vendor/google/contrib/apiBloggerService.php:     * Gets one comment by id. (comments.get)
mod/gdrive/vendor/google/contrib/apiBloggerService.php:  public $comments;
mod/gdrive/vendor/google/contrib/apiBloggerService.php:    $this->comments = new CommentsServiceResource($this, $this->serviceName, 'comments', json_decode('{"methods": {"list": {"scopes": ["https://www.googleapis.com/auth/blogger"], "parameters": {"startDate": {"type": "string", "location": "query"}, "postId": {"required": true, "type": "string", "location": "path"}, "maxResults": {"format": "uint32", "type": "integer", "location": "query"}, "pageToken": {"type": "string", "location": "query"}, "fetchBodies": {"type": "boolean", "location": "query"}, "blogId": {"required": true, "type": "string", "location": "path"}}, "id": "blogger.comments.list", "httpMethod": "GET", "path": "blogs/{blogId}/posts/{postId}/comments", "response": {"$ref": "CommentList"}}, "get": {"scopes": ["https://www.googleapis.com/auth/blogger"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}, "postId": {"required": true, "type": "string", "location": "path"}, "blogId": {"required": true, "type": "string", "location": "path"}}, "id": "blogger.comments.get", "httpMethod": "GET", "path": "blogs/{blogId}/posts/{postId}/comments/{commentId}", "response": {"$ref": "Comment"}}}}', true));
mod/gdrive/vendor/google/service/apiService.php: * for $this->activities, $this->comments, $this->people, etc.
mod/pages/pages/pages/view.php:$content .= elgg_view_comments($page);
mod/pages/views/default/pages/sidebar.php:echo elgg_view('page/elements/comments_block', array(
mod/pages/views/default/object/page_top.php:$comments_count = $page->countComments();
mod/pages/views/default/object/page_top.php:if ($comments_count != 0 && !$revision) {
mod/pages/views/default/object/page_top.php:	$text = elgg_echo("comments") . " ($comments_count)";
mod/pages/views/default/object/page_top.php:	$comments_link = elgg_view('output/url', array(
mod/pages/views/default/object/page_top.php:		'href' => $page->getURL() . '#page-comments',
mod/pages/views/default/object/page_top.php:	$comments_link = '';
mod/pages/views/default/object/page_top.php:$subtitle = "$editor_text $comments_link $categories";
mod/pages/vendors/jquery-treeview/lib/jquery.js:	// Make sure no comments are found
mod/pages/vendors/jquery-treeview/lib/jquery.js:			// Filter out possible comments
mod/developers/languages/en.php:	'developers:help:wrap_views' => "This wraps almost every view with HTML comments. Useful for finding the view creating particular HTML.",
mod/developers/start.php: * Post-process a view to add wrapper comments to it
mod/_mod/Search/Languages/it.php:  'search_types:comments' => 'Commenti',
mod/homepage_cms/.git/hooks/prepare-commit-msg.sample:# This hook includes three examples.  The first comments out the
mod/homepage_cms/.git/info/exclude:# Lines that start with '#' are comments.
mod/groups/languages/en.php:	'groups:forum:created' => 'Created %s with %d comments',
mod/groups/languages/en.php:	'groups:topiccloseddesc' => 'This discussion is closed and is not accepting new comments.',
mod/groups/start.php:	// because replies are not comments, need of our menu item
mod/live_notifications/languages/es.php:	'live_notifications:comments:create' => '%s a comentado tu publición: ',
mod/live_notifications/languages/es.php:	'live_notifications:comments:thread' => '%s tambien a comentado la publición: ',
mod/live_notifications/languages/en.php:	'live_notifications:comments:create' => '%s commented in your post: ',
mod/live_notifications/languages/en.php:	'live_notifications:comments:thread' => '%s also commented in the post: ',
mod/live_notifications/start.php:		analize_thread_comments($entity, $annotation, $from_entity);
mod/live_notifications/start.php:			$description =  elgg_echo('live_notifications:comments:create', array($url_user, $to_entity->name));
mod/live_notifications/start.php:function analize_thread_comments($entity, $annotation, $from_entity){
mod/live_notifications/start.php:	$comments = elgg_get_annotations(array(
mod/live_notifications/start.php:	$autors_comments = array();	
mod/live_notifications/start.php:    if ($comments) {       
mod/live_notifications/start.php:        foreach ($comments as $comment) {
mod/live_notifications/start.php:            if($owner_guid!=$from_entity->guid && $owner_guid!=$entity->owner_guid && !in_array($owner_guid, $autors_comments)){
mod/live_notifications/start.php:            	$description =  elgg_echo('live_notifications:comments:thread', array($url_user, $entity->name));
mod/live_notifications/start.php:            	$autors_comments[] = $owner_guid;
mod/live_notifications/README:New comments by other users in any publication (Entity) supporting comments.
mod/live_notifications/README:New user comments in threads of publication where the user participates.
mod/hypeAlive/lib/likes/base.php:        $text_owner = elgg_echo('hj:alive:comments:lang:you');
mod/hypeAlive/lib/likes/base.php:        $text_and = elgg_echo('hj:alive:comments:lang:and');
mod/hypeAlive/lib/likes/base.php:        $text_others = elgg_echo('hj:alive:comments:lang:others');
mod/hypeAlive/lib/likes/base.php:        $text_others_one = elgg_echo('hj:alive:comments:lang:othersone');
mod/hypeAlive/lib/likes/base.php:        $text_people = elgg_echo('hj:alive:comments:lang:people');
mod/hypeAlive/lib/likes/base.php:        $text_people_one = elgg_echo('hj:alive:comments:lang:peopleone');
mod/hypeAlive/lib/likes/base.php:        $text_likethis = elgg_echo('hj:alive:comments:lang:likethis');
mod/hypeAlive/lib/likes/base.php:        $text_likesthis = elgg_echo('hj:alive:comments:lang:likesthis');
mod/hypeAlive/lib/alive/setup.php:        elgg_set_plugin_setting('river_comments', 'on', 'hypeAlive');
mod/hypeAlive/lib/alive/setup.php:        elgg_set_plugin_setting('entity_comments', 'on', 'hypeAlive');
mod/hypeAlive/lib/alive/setup.php:        elgg_set_plugin_setting('forum_comments', 'on', 'hypeAlive');
mod/hypeAlive/lib/comments/base.php:function hj_alive_view_comments_list($entity, $params) {
mod/hypeAlive/lib/comments/base.php:        $comments = elgg_get_entities_from_metadata($options);
mod/hypeAlive/lib/comments/base.php:    $vars['list_class'] = 'hj-comments';
mod/hypeAlive/lib/comments/base.php:    $visible = elgg_view_entity_list($comments, $vars);
mod/hypeAlive/lib/comments/base.php:            $summary = elgg_echo('hj:alive:comments:remainder', array($remainder));
mod/hypeAlive/lib/comments/base.php:            $summary = elgg_echo('hj:alive:comments:viewall', array($remainder));
mod/hypeAlive/lib/comments/base.php:    return elgg_view('hj/comments/list', array(
mod/hypeAlive/changes.txt:- Replaced default import of all elgg annotations with a plugin settings option to import generic comments and forum topic posts
mod/hypeAlive/changes.txt:- Added option to enable/disable hypeAlive comments/likes for river, entities and forum
mod/hypeAlive/changes.txt:- Added comments to the search
mod/hypeAlive/views/default/css/hj/comments/base.php:.elgg-menu-comments {
mod/hypeAlive/views/default/css/hj/comments/base.php:.elgg-menu-comments li.elgg-menu-item-comment {
mod/hypeAlive/views/default/css/hj/comments/base.php:.elgg-menu-comments li a {
mod/hypeAlive/views/default/css/hj/comments/base.php:li.elgg-menu-item-showallcomments {
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-comments-bubble,
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-comments-list .elgg-list > li
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-comments-bubble {
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-annotations-list .hj-annotations-list .hj-comments-bubble {
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-annotations-list .hj-annotations-list .hj-comments-list .elgg-list > li {
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-comments-list .elgg-list {
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-comments-input {
mod/hypeAlive/views/default/css/hj/comments/base.php:.hj-comments-bubble-pointer {
mod/hypeAlive/views/default/css/hj/comments/base.php:.elgg-menu-comments li a.hidden {
mod/hypeAlive/views/default/search/comments/entity.php:// @todo Sometimes we find comments on entities we can't display...
mod/hypeAlive/views/default/discussion/replies.php:if (elgg_get_plugin_setting('forum_comments', 'hypeAlive') !== off) {
mod/hypeAlive/views/default/hj/likes/list.php:    <div class="hj-comments-bubble hj-likes-summary $hidden" data-options="$params">$string</div>
mod/hypeAlive/views/default/hj/comments/list.php:    $summary = "<div class=\"hj-comments-bubble hj-comments-summary\"><a href=\"javascript:void(0)\">$summary</a></div>";
mod/hypeAlive/views/default/hj/comments/list.php:    <div class="hj-comments-list hj-comments-visible">$visible</div>
mod/hypeAlive/views/default/hj/comments/list.php:    <div class="hj-comments-hidden hidden">$hidden</div>
mod/hypeAlive/views/default/hj/comments/bar.php:elgg_load_css('hj.comments.base');
mod/hypeAlive/views/default/hj/comments/bar.php:    elgg_load_js('hj.comments.base');
mod/hypeAlive/views/default/hj/comments/bar.php:$comments_view = hj_alive_view_comments_list($entity, $params);
mod/hypeAlive/views/default/hj/comments/bar.php:$menu = elgg_view_menu('comments', array(
mod/hypeAlive/views/default/hj/comments/bar.php:$comments_input = elgg_view('hj/comments/input', $params);
mod/hypeAlive/views/default/hj/comments/bar.php:	<div class="hj-comments-bubble hj-comments-input hidden"><?php echo $comments_input ?></div>
mod/hypeAlive/views/default/hj/comments/bar.php:	    <?php echo $comments_view ?>
mod/hypeAlive/views/default/hj/group_posts/bar.php:elgg_load_css('hj.comments.base');
mod/hypeAlive/views/default/hj/group_posts/bar.php:    elgg_load_js('hj.comments.base');
mod/hypeAlive/views/default/hj/group_posts/bar.php:$comments_view = hj_alive_view_comments_list($entity, $params);
mod/hypeAlive/views/default/hj/group_posts/bar.php:$menu = elgg_view_menu('comments', array(
mod/hypeAlive/views/default/hj/group_posts/bar.php:$comments_input = elgg_view('hj/comments/input', $params);
mod/hypeAlive/views/default/hj/group_posts/bar.php:        <div class="hj-comments-bubble hj-comments-input hidden"><?php echo $comments_input ?></div>
mod/hypeAlive/views/default/hj/group_posts/bar.php:            <?php echo $comments_view ?>
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:$import_label = "hypeAlive treats comments and group forum posts as entities, and not annotations. For this reason, previously added comments will not show by default. You can however import these comments and topic posts (if you have too many comments, this action might time out)";
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:$river_label = "Enable hypeAlive comments and likes for river";
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:	'name' => 'params[river_comments]',
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:	'value' => $vars['entity']->river_comments,
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:$entity_label = "Enable hypeAlive comments and likes for content items (overwrites the defaul elgg_view_comments())";
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:	'name' => 'params[entity_comments]',
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:	'value' => $vars['entity']->entity_comments,
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:$forum_label = "Enable hypeAlive comments and likes for group forum topics";
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:	'name' => 'params[forum_comments]',
mod/hypeAlive/views/default/plugins/hypeAlive/settings.php:	'value' => $vars['entity']->forum_comments,
mod/hypeAlive/views/default/livesearch/list.php: * or search type (comments for example)
mod/hypeAlive/views/default/livesearch/list.php: *                          - 'search_type' Type of search: 'entities', 'comments', 'tags'
mod/hypeAlive/views/default/livesearch/list.php:	$title_key = ($more == 1) ? 'comment' : 'comments';
mod/hypeAlive/views/default/river/elements/responses.php:// annotations do not have comments
mod/hypeAlive/views/default/river/elements/responses.php:if (elgg_get_plugin_setting('river_comments', 'hypeAlive') !== 'off') {
mod/hypeAlive/views/default/river/elements/responses.php:	echo elgg_view('hj/comments/bar', array(
mod/hypeAlive/views/default/river/elements/responses.php:    $comments = elgg_get_annotations($options);
mod/hypeAlive/views/default/river/elements/responses.php:    if ($comments) {
mod/hypeAlive/views/default/river/elements/responses.php:	// comments by sorting desc and limiting by 3, but we want to display
mod/hypeAlive/views/default/river/elements/responses.php:	// these comments with the latest at the bottom.
mod/hypeAlive/views/default/river/elements/responses.php:	$comments = array_reverse($comments);
mod/hypeAlive/views/default/river/elements/responses.php:	<span class="elgg-river-comments-tab"><?php echo elgg_echo('comments'); ?></span>
mod/hypeAlive/views/default/river/elements/responses.php:	echo elgg_view_annotation_list($comments, array('list_class' => 'elgg-river-comments'));
mod/hypeAlive/views/default/river/elements/responses.php:	if ($comment_count > count($comments)) {
mod/hypeAlive/views/default/river/elements/responses.php:	    $num_more_comments = $comment_count - count($comments);
mod/hypeAlive/views/default/river/elements/responses.php:		'text' => elgg_echo('river:comments:more', array($num_more_comments)),
mod/hypeAlive/views/default/river/elements/responses.php:    $form_vars = array('id' => "comments-add-{$object->getGUID()}", 'class' => 'hidden');
mod/hypeAlive/views/default/river/elements/responses.php:    echo elgg_view_form('comments/add', $form_vars, $body_vars);
mod/hypeAlive/views/default/js/hj/likes/base.php:                    //elgg.system_message(elgg.echo('hj:comments:refreshing'));
mod/hypeAlive/views/default/js/hj/comments/base.php:    elgg.provide('hj.comments');
mod/hypeAlive/views/default/js/hj/comments/base.php:    hj.comments.init = function() {
mod/hypeAlive/views/default/js/hj/comments/base.php:        if(window.ajaxcommentsready === undefined) {
mod/hypeAlive/views/default/js/hj/comments/base.php:            window.ajaxcommentsready = true;
mod/hypeAlive/views/default/js/hj/comments/base.php:        hj.comments.triggerRefresh();
mod/hypeAlive/views/default/js/hj/comments/base.php:            .find('.hj-comments-input:first')
mod/hypeAlive/views/default/js/hj/comments/base.php:        // Toggle loading of older comments
mod/hypeAlive/views/default/js/hj/comments/base.php:        $('.hj-comments-summary')
mod/hypeAlive/views/default/js/hj/comments/base.php:                var commentsList = $(this).siblings('.hj-comments-list:first').children('.hj-syncable.hj-comments:first');
mod/hypeAlive/views/default/js/hj/comments/base.php:                var last = $('li.elgg-item:last', commentsList);
mod/hypeAlive/views/default/js/hj/comments/base.php:                    last = commentsList;
mod/hypeAlive/views/default/js/hj/comments/base.php:                var data = commentsList.data('options');
mod/hypeAlive/views/default/js/hj/comments/base.php:                hj.comments.refresh(ref, 'old');
mod/hypeAlive/views/default/js/hj/comments/base.php:        .bind('submit', hj.comments.saveComment);
mod/hypeAlive/views/default/js/hj/comments/base.php:    hj.comments.triggerRefresh = function() {
mod/hypeAlive/views/default/js/hj/comments/base.php:        if (!window.commentstimer) {
mod/hypeAlive/views/default/js/hj/comments/base.php:            window.commentstimer = true;
mod/hypeAlive/views/default/js/hj/comments/base.php:            var refresh_comments = window.setTimeout(function(){
mod/hypeAlive/views/default/js/hj/comments/base.php:                $('.hj-syncable.hj-comments')
mod/hypeAlive/views/default/js/hj/comments/base.php:                if (window.ajaxcommentsready) {
mod/hypeAlive/views/default/js/hj/comments/base.php:                    //elgg.system_message(elgg.echo('hj:comments:refreshing'));
mod/hypeAlive/views/default/js/hj/comments/base.php:                    hj.comments.refresh(ref, 'new');
mod/hypeAlive/views/default/js/hj/comments/base.php:                window.commentstimer = false;
mod/hypeAlive/views/default/js/hj/comments/base.php:    hj.comments.refresh = function(data, sync) {
mod/hypeAlive/views/default/js/hj/comments/base.php:        if (window.ajaxcommentsready || sync == 'old') {
mod/hypeAlive/views/default/js/hj/comments/base.php:            window.ajaxcommentsready = false;
mod/hypeAlive/views/default/js/hj/comments/base.php:                            var commentsList = container.find('ul.hj-syncable.hj-comments:first');
mod/hypeAlive/views/default/js/hj/comments/base.php:                            $.each(val.comments, function(key2, val2) {
mod/hypeAlive/views/default/js/hj/comments/base.php:                                    commentsList
mod/hypeAlive/views/default/js/hj/comments/base.php:                                    commentsList
mod/hypeAlive/views/default/js/hj/comments/base.php:                    $('.hj-comments-summary').has('.hj-ajax-loader').each(function() {$(this).hide()});
mod/hypeAlive/views/default/js/hj/comments/base.php:                    window.ajaxcommentsready = true;
mod/hypeAlive/views/default/js/hj/comments/base.php:    hj.comments.saveComment = function(event) {
mod/hypeAlive/views/default/js/hj/comments/base.php:        container, commentsList;
mod/hypeAlive/views/default/js/hj/comments/base.php:        commentsList = container.find('ul.hj-syncable.hj-comments:first');
mod/hypeAlive/views/default/js/hj/comments/base.php:        data.timestamp = $('li.elgg-item:first', commentsList).data('timestamp');
mod/hypeAlive/views/default/js/hj/comments/base.php:                hj.comments.refresh(ref, 'new');
mod/hypeAlive/views/default/js/hj/comments/base.php:                .parents('div.hj-comments-input:first')
mod/hypeAlive/views/default/js/hj/comments/base.php:    elgg.register_hook_handler('init', 'system', hj.comments.init);
mod/hypeAlive/views/default/js/hj/comments/base.php:    //elgg.register_hook_handler('init', 'system', hj.comments.triggerRefresh);
mod/hypeAlive/views/default/js/hj/comments/base.php:    elgg.register_hook_handler('success', 'hj:framework:ajax', hj.comments.init, 500);
mod/hypeAlive/actions/hj/comment/get.php:            $comments[] = $html;
mod/hypeAlive/actions/hj/comment/get.php:    if ($comments) {
mod/hypeAlive/actions/hj/comment/get.php:        $output[] = array('id' => $id, 'comments' => $comments);
mod/hypeAlive/actions/hj/comment/get.php:    unset($comments);
mod/hypeAlive/actions/hj/comment/save.php:    register_error(elgg_echo('hj:alive:comments:valuecantbeblank'));
mod/hypeAlive/actions/hj/comment/save.php:    register_error(elgg_echo('hj:comments:cantfind'));
mod/hypeAlive/actions/hj/comment/save.php:    system_message(elgg_echo('hj:comments:savesuccess'));
mod/hypeAlive/actions/hj/comment/save.php:    register_error(elgg_echo('hj:comments:saveerror'));
mod/hypeAlive/languages/en.php:    'hj:alive:comments:likebutton' => 'Like',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:unlikebutton' => 'Unlike',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:commentsbutton' => 'Comment',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:sharebutton' => 'Share',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:viewall' => 'View all %s comments',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:remainder' => 'View remaining %s comments',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:nocomments' => 'Be first to comment',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:valuecantbeblank' => 'Comment can not be blank',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:you' => 'You ',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:and' => 'and ',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:others' => 'other people ',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:othersone' => 'other person ',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:people' => 'people ',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:peopleone' => 'person ',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:likethis' => 'like this',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:lang:likesthis' => 'likes this',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:count' => 'comments',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:comments' => 'comments',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:delete' => 'Delete',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:newcomment' => 'Write a comment',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:addtopic' => 'Add new topic',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:forumtopictitle' => 'Enter your forum title...',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:forumtopicdescription' => 'Enter your forum message...',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:commentmissing' => 'Oh, your comment is missing',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:bodymissing' => 'Oh, you have not entered any text',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:topicmissing' => 'Oh, you need to enter a name for your forum topic',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:commenton' => 'Comment on %s',
mod/hypeAlive/languages/en.php:    'hj:alive:comments:commentcontent' => '%s: %s',
mod/hypeAlive/languages/en.php:    'hj:comments:cantfind' => 'Oops, there was a problem adding your comment. The item must have been deleted',
mod/hypeAlive/languages/en.php:    'hj:comments:savesuccess' => 'Your comment was added successfully',
mod/hypeAlive/languages/en.php:    'hj:comments:refreshing' => 'Refreshing...',
mod/hypeAlive/languages/en.php:    'hj:comments:notify:activity_type:create' => 'New %s %s added',
mod/hypeAlive/languages/en.php:    'hj:comments:notify:activity_type:update' => 'Updates to %s %s',
mod/hypeAlive/languages/en.php:    'hj:comments:notify:activity' => 'activity | <br />%s',
mod/hypeAlive/languages/en.php:    'hj:comments:notify:post' => 'content | %s %s',
mod/hypeAlive/start.php:	elgg_register_library('hj:alive:comments:base', $shortcuts['lib'] . 'comments/base.php');
mod/hypeAlive/start.php:	elgg_load_library('hj:alive:comments:base');
mod/hypeAlive/start.php:	hj_alive_comments_init();
mod/hypeAlive/start.php:function hj_alive_comments_init() {
mod/hypeAlive/start.php:	$css_url = elgg_get_simplecache_url('css', 'hj/comments/base');
mod/hypeAlive/start.php:	elgg_register_css('hj.comments.base', $css_url);
mod/hypeAlive/start.php:	$js_generic_url = elgg_get_simplecache_url('js', 'hj/comments/base');
mod/hypeAlive/start.php:	elgg_register_js('hj.comments.base', $js_generic_url);
mod/hypeAlive/start.php:	elgg_load_css('hj.comments.base');
mod/hypeAlive/start.php:		elgg_load_js('hj.comments.base');
mod/hypeAlive/start.php:	// Register a hook to replace Elgg comments with hypeAlive
mod/hypeAlive/start.php:	if (elgg_get_plugin_setting('entity_comments', 'hypeAlive') !== 'off') {
mod/hypeAlive/start.php:		elgg_register_plugin_hook_handler('comments', 'all', 'hj_alive_comments_replacement');
mod/hypeAlive/start.php:		// Search comments
mod/hypeAlive/start.php:		elgg_unregister_plugin_hook_handler('search', 'comments', 'search_comments_hook');
mod/hypeAlive/start.php:		elgg_register_plugin_hook_handler('search', 'comments', 'hj_alive_search_comments_hook');
mod/hypeAlive/start.php:	if (elgg_get_plugin_setting('river_comments', 'hypeAlive') !== 'off') {
mod/hypeAlive/start.php:	elgg_register_plugin_hook_handler('register', 'menu:comments', 'hj_alive_comments_menu');
mod/hypeAlive/start.php:	elgg_register_plugin_hook_handler('register', 'menu:commentshead', 'hj_alive_commentshead_menu');
mod/hypeAlive/start.php: *  Replaces native Elgg comments with hypeAlive Comments
mod/hypeAlive/start.php:function hj_alive_comments_replacement($hook, $entity_type, $returnvalue, $params) {
mod/hypeAlive/start.php:	return elgg_view('hj/comments/bar', $params);
mod/hypeAlive/start.php:function hj_alive_comments_menu($hook, $type, $return, $params) {
mod/hypeAlive/start.php:			'text' => elgg_echo('hj:alive:comments:likebutton'),
mod/hypeAlive/start.php:			'title' => elgg_echo('hj:alive:comments:likebutton'),
mod/hypeAlive/start.php:			'text' => elgg_echo('hj:alive:comments:unlikebutton'),
mod/hypeAlive/start.php:			'title' => elgg_echo('hj:alive:comments:unlikebutton'),
mod/hypeAlive/start.php:			'text' => elgg_echo('hj:alive:comments:commentsbutton'),
mod/hypeAlive/start.php:function hj_alive_commentshead_menu($hook, $type, $return, $params) {
mod/hypeAlive/start.php:function hj_alive_search_comments_hook($hook, $type, $value, $params) {
mod/hypeAlive/readme.txt:    -- Real-time updates of comments (new comments are pushed into the page without the need to reload)
mod/hypeAlive/readme.txt:    -- Introduces traverse commenting, where the users can comment on a comment. Unlimited depth of the comments tree
mod/hypeAlive/readme.txt:-- Place hypeAlive below hypeFramework in the comments list and activate
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc: * @todo phpDoc comments
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:			$this->strip_comments(false);
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	function strip_comments($strip = false)
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:		$this->sanitize->strip_comments($strip);
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	 * Strip HTML comments
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	 * @param string $data Data to strip comments from
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	function strip_comments($data)
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	 * Remove RFC822 comments
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	 * @param string $data Data to strip comments from
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	 * Remove RFC822 comments
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	 * @param string $data Data to strip comments from
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	function remove_rfc2822_comments($string)
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:		if (preg_match($pcre, $this->remove_rfc2822_comments($date), $match))
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	var $strip_comments = false;
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:	function strip_comments($strip = false)
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:		$this->strip_comments = (bool) $strip;
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:				// Strip comments
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:				if ($this->strip_comments)
mod/widget_manager/widgets/rss/vendors/simplepie/simplepie.inc:					$data = SimplePie_Misc::strip_comments($data);
mod/tasks/pages/tasks/view.php:$content .= elgg_view_comments($task);
mod/tasks/views/default/tasks/sidebar.php:echo elgg_view('task/elements/comments_block', array(
mod/tasks/views/default/object/task_top.php:$comments_count = $task->countComments();
mod/tasks/views/default/object/task_top.php:if ($comments_count != 0 && !$revision) {
mod/tasks/views/default/object/task_top.php:	$text = elgg_echo("comments") . " ($comments_count)";
mod/tasks/views/default/object/task_top.php:	$comments_link = elgg_view('output/url', array(
mod/tasks/views/default/object/task_top.php:		'href' => $task->getURL() . '#task-comments',
mod/tasks/views/default/object/task_top.php:	$comments_link = '';
mod/tasks/views/default/object/task_top.php:$subtitle = "$editor_text $comments_link $categories";
mod/tasks/vendors/jquery-treeview/lib/jquery.js:	// Make sure no comments are found
mod/tasks/vendors/jquery-treeview/lib/jquery.js:			// Filter out possible comments
mod/event_manager/classes/Event.php: 			"comments_on" 						=> NULL,
mod/event_manager/views/default/event_manager/forms/event/edit.php:			"comments_on"			=> 1,
mod/event_manager/views/default/event_manager/forms/event/edit.php:	$form_body .= 	elgg_view('input/checkboxes', array('name' => 'comments_on', 'value' => $fields["comments_on"], 'options' => array(elgg_echo('event_manager:edit:form:comments_on')=>'1')));
mod/event_manager/views/default/event_manager/event/view.php:	if($event->comments_on){	
mod/event_manager/views/default/event_manager/event/view.php:		echo elgg_view_comments($event);
mod/event_manager/vendors/dompdf/dompdf_config.inc.php: * - Add comments about configuration parameter implications
mod/event_manager/vendors/dompdf/include/stylesheet.cls.php:        // Destroy CSS comments
mod/event_manager/vendors/dompdf/include/stylesheet.cls.php:    // Destroy comments and remove HTML comments
mod/event_manager/vendors/dompdf/include/text_renderer.cls.php: * - better accuracy on using different renderer as cpdf, added comments
mod/event_manager/vendors/dompdf/include/style.cls.php: * - Added comments
mod/event_manager/vendors/dompdf/include/font_metrics.cls.php: * - Add comments
mod/event_manager/actions/migrate/calender.php:		$new_event->comments_on			= true;
mod/event_manager/actions/event/edit.php:	$comments_on 			= get_input("comments_on");
mod/event_manager/actions/event/edit.php:		$event->comments_on 		= $comments_on;
mod/event_manager/actions/event/edit.php:		$_SESSION['createevent_values']['comments_on'] 			= $comments_on;
mod/event_manager/languages/it.php:  'event_manager:edit:form:comments_on' => 'Commenti su?',
mod/event_manager/languages/fr.php:		'event_manager:edit:form:comments_on' => 'Commentaires activés ?',
mod/event_manager/languages/en.php:		'event_manager:edit:form:comments_on' => 'Comments on?',
mod/event_manager/languages/nl.php:  'event_manager:edit:form:comments_on' => 'Comments aan?',
mod/file/pages/file/view.php:$content .= elgg_view_comments($file);
mod/file/views/default/file/sidebar.php:echo elgg_view('page/elements/comments_block', array(
mod/file/views/default/object/file.php:$comments_count = $file->countComments();
mod/file/views/default/object/file.php:if ($comments_count != 0) {
mod/file/views/default/object/file.php:	$text = elgg_echo("comments") . " ($comments_count)";
mod/file/views/default/object/file.php:	$comments_link = elgg_view('output/url', array(
mod/file/views/default/object/file.php:		'href' => $file->getURL() . '#file-comments',
mod/file/views/default/object/file.php:	$comments_link = '';
mod/file/views/default/object/file.php:$subtitle = "$author_text $date $comments_link $categories";
mod/answers/views/default/object/answer.php:					$comments = $answer->getAnnotations('comment', 9999, 0, "asc");
mod/answers/views/default/object/answer.php:					if ($comments) {
mod/answers/views/default/object/answer.php:						foreach ($comments as $comment) {
mod/answers/views/default/object/answer.php:						//display the add comment form, this will appear after all the existing comments
mod/answers/views/default/object/question.php:		// display comments if in full view
mod/answers/views/default/object/question.php:			$comments = $vars['entity']->getAnnotations('comment', 9999, 0, "asc");
mod/answers/views/default/object/question.php:			if ($comments) {
mod/answers/views/default/object/question.php:				foreach ($comments as $comment) {
mod/answers/views/default/object/question.php:				//display the add comment form, this will appear after all the existing comments
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:						// IE will remove comments from the beginning
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:						// Create new div with HTML contents and a BR infront to keep comments
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:	// Make sure no comments are found
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:			// Filter out possible comments
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:		// Force script into CDATA sections and remove the mce- prefix also add comments around styles
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:		// Convert comments to cdata and handle protected comments
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:			sn = sn.nodeName == "HTML" ? d.body : sn; // Fix for Opera bug: https://bugs.opera.com/show_bug.cgi?id=273224&comments=yes
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/tiny_mce_src.js:			en = en.nodeName == "HTML" ? d.body : en; // Fix for Opera bug: https://bugs.opera.com/show_bug.cgi?id=273224&comments=yes
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/plugins/paste/editor_plugin_src.js:					// Word comments like conditional comments etc
mod/tinymce/vendor/tinymce/jscripts/tiny_mce/plugins/paste/editor_plugin_src.js:					// Remove comments, scripts (e.g., msoShowComment), XML tag, VML content, MS Office namespaced tags, and a few other tags
mod/tinymce/vendor/tinymce/changelog.txt:	Changed inline documentation to use moxiedoc style comments.
mod/tinymce/vendor/tinymce/changelog.txt:	Fixed bug where comment couldn't contain -- since it's invalid markup. It will now at least not break on those invalid comments.
mod/tinymce/vendor/tinymce/changelog.txt:	Added new pagebreak plugin, enables you to insert pagebreak comments like <!-- pagebreak -->
mod/hypeFramework/lib/framework/setup.php:    $form->comments_on = false;
mod/hypeFramework/lib/framework/setup.php:    $form->comments_on = true;
mod/hypeFramework/classes/hjForm.php:    private $comments_on = false;
mod/hypeFramework/classes/hjAnnotation.php:			$entity_title = elgg_echo('hj:comments:notify:activity', array(
mod/hypeFramework/classes/hjAnnotation.php:				elgg_echo("hj:comments:notify:activity_type:$original_container->action_type", array(
mod/hypeFramework/classes/hjAnnotation.php:			$entity_title = elgg_echo("hj:comments:notify:post", array($entity_subtype, $entity_title));
mod/hypeFramework/classes/hjAnnotation.php:		// Notify owners of comments in the thread
mod/hypeFramework/views/default/css/hj/framework/icons.php:.hj-icon-comments
mod/hypeFramework/views/default/css/hj/framework/icons.php:.hj-icon-comments:hover
mod/hypeFramework/views/default/object/hjannotation.php:$menu = elgg_view_menu('commentshead', array(
mod/hypeFramework/views/default/object/hjannotation.php:    'class' => 'hj-comments-item-comment-owner'
mod/hypeFramework/views/default/object/hjannotation.php:$comment = elgg_echo('hj:alive:comments:commentcontent', array($author, $comment));
mod/hypeFramework/views/default/object/hjannotation.php:$bar = elgg_view('hj/comments/bar', $vars);
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!script.js:	 * This process would get rid of highligted strings inside comments, 
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!script.js:		{ regex: new XRegExp('(\\&lt;|<)!--\\s*.*?\\s*--(\\&gt;|>)', 'gm'),								css: 'comments' },	// <!-- ... -->
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!script.js:		{ regex: SyntaxHighlighter.regexLib.singleLineCComments,	css: 'comments' },			// one line comments
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!script.js:		{ regex: SyntaxHighlighter.regexLib.multiLineCComments,		css: 'comments' },			// multiline comments
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!style.css:.syntaxhighlighter.printing .comments,
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!style.css:.syntaxhighlighter.printing .comments a
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!style.css:.syntaxhighlighter .comments,
mod/hypeFramework/views/default/js/vendors/jstree/_docs/syntax/!style.css:.syntaxhighlighter .comments a
mod/hypeFramework/actions/hj/framework/submit.php:    $formSubmission->comments_on = $form->comments_on;
mod/hypeFramework/languages/en.php:    'admin:hj:comments' => 'Comments',
mod/blog/lib/blog.php:	if ($blog->comments_on != 'Off') {
mod/blog/lib/blog.php:		$return['content'] .= elgg_view_comments($blog);
mod/blog/lib/blog.php:		'comments_on' => 'On',
mod/blog/classes/ElggBlog.php: * @property string $comments_on Whether commenting is allowed (Off, On)
mod/blog/classes/ElggBlog.php:		if ($this->comments_on == 'Off') {
mod/blog/views/default/object/blog.php:// The "on" status changes for comments, so best to check for !Off
mod/blog/views/default/object/blog.php:if ($blog->comments_on != 'Off') {
mod/blog/views/default/object/blog.php:	$comments_count = $blog->countComments();
mod/blog/views/default/object/blog.php:	if ($comments_count != 0) {
mod/blog/views/default/object/blog.php:		$text = elgg_echo("comments") . " ($comments_count)";
mod/blog/views/default/object/blog.php:		$comments_link = elgg_view('output/url', array(
mod/blog/views/default/object/blog.php:			'href' => $blog->getURL() . '#blog-comments',
mod/blog/views/default/object/blog.php:		$comments_link = '';
mod/blog/views/default/object/blog.php:	$comments_link = '';
mod/blog/views/default/object/blog.php:$subtitle = "$author_text $date $comments_link $categories";
mod/blog/views/default/forms/blog/save.php:$comments_label = elgg_echo('comments');
mod/blog/views/default/forms/blog/save.php:$comments_input = elgg_view('input/dropdown', array(
mod/blog/views/default/forms/blog/save.php:	'name' => 'comments_on',
mod/blog/views/default/forms/blog/save.php:	'id' => 'blog_comments_on',
mod/blog/views/default/forms/blog/save.php:	'value' => $vars['comments_on'],
mod/blog/views/default/forms/blog/save.php:	<label for="blog_comments_on">$comments_label</label>
mod/blog/views/default/forms/blog/save.php:	$comments_input
mod/blog/views/default/blog/sidebar.php:// fetch & display latest comments
mod/blog/views/default/blog/sidebar.php:	echo elgg_view('page/elements/comments_block', array(
mod/blog/views/default/blog/sidebar.php:	echo elgg_view('page/elements/comments_block', array(
mod/blog/actions/blog/save.php:	'comments_on' => 'On',
mod/..prova.txt:gdrive/vendor/google/contrib/apiOrkutService.php:    $this->communityPollComments = new CommunityPollCommentsServiceResource($this, $this->serviceName, 'communityPollComments', json_decode('{"methods": {"insert": {"scopes": ["https://www.googleapis.com/auth/orkut"], "parameters": {"communityId": {"format": "int32", "required": true, "type": "integer", "location": "path"}, "pollId": {"required": true, "type": "string", "location": "path"}}, "request": {"$ref": "CommunityPollComment"}, "id": "orkut.communityPollComments.insert", "httpMethod": "POST", "path": "communities/{communityId}/polls/{pollId}/comments", "response": {"$ref": "CommunityPollComment"}}, "list": {"scopes": ["https://www.googleapis.com/auth/orkut", "https://www.googleapis.com/auth/orkut.readonly"], "parameters": {"pageToken": {"type": "string", "location": "query"}, "communityId": {"format": "int32", "required": true, "type": "integer", "location": "path"}, "hl": {"type": "string", "location": "query"}, "maxResults": {"format": "uint32", "minimum": "1", "type": "integer", "location": "query"}, "pollId": {"required": true, "type": "string", "location": "path"}}, "id": "orkut.communityPollComments.list", "httpMethod": "GET", "path": "communities/{communityId}/polls/{pollId}/comments", "response": {"$ref": "CommunityPollCommentList"}}}}', true));
mod/..prova.txt:gdrive/vendor/google/contrib/apiOrkutService.php:    $this->comments = new CommentsServiceResource($this, $this->serviceName, 'comments', json_decode('{"methods": {"insert": {"scopes": ["https://www.googleapis.com/auth/orkut"], "parameters": {"activityId": {"required": true, "type": "string", "location": "path"}}, "request": {"$ref": "Comment"}, "id": "orkut.comments.insert", "httpMethod": "POST", "path": "activities/{activityId}/comments", "response": {"$ref": "Comment"}}, "delete": {"scopes": ["https://www.googleapis.com/auth/orkut"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}}, "httpMethod": "DELETE", "path": "comments/{commentId}", "id": "orkut.comments.delete"}, "list": {"scopes": ["https://www.googleapis.com/auth/orkut", "https://www.googleapis.com/auth/orkut.readonly"], "parameters": {"orderBy": {"default": "DESCENDING_SORT", "enum": ["ascending", "descending"], "location": "query", "type": "string"}, "pageToken": {"type": "string", "location": "query"}, "activityId": {"required": true, "type": "string", "location": "path"}, "hl": {"type": "string", "location": "query"}, "maxResults": {"format": "uint32", "minimum": "1", "type": "integer", "location": "query"}}, "id": "orkut.comments.list", "httpMethod": "GET", "path": "activities/{activityId}/comments", "response": {"$ref": "CommentList"}}, "get": {"scopes": ["https://www.googleapis.com/auth/orkut", "https://www.googleapis.com/auth/orkut.readonly"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}, "hl": {"type": "string", "location": "query"}}, "id": "orkut.comments.get", "httpMethod": "GET", "path": "comments/{commentId}", "response": {"$ref": "Comment"}}}}', true));
mod/..prova.txt:gdrive/vendor/google/contrib/apiPlusService.php:    $this->comments = new CommentsServiceResource($this, $this->serviceName, 'comments', json_decode('{"methods": {"list": {"scopes": ["https://www.googleapis.com/auth/plus.me"], "parameters": {"pageToken": {"type": "string", "location": "query"}, "activityId": {"required": true, "type": "string", "location": "path"}, "alt": {"default": "json", "enum": ["json"], "location": "query", "type": "string"}, "maxResults": {"format": "uint32", "default": "20", "maximum": "100", "minimum": "0", "location": "query", "type": "integer"}}, "id": "plus.comments.list", "httpMethod": "GET", "path": "activities/{activityId}/comments", "response": {"$ref": "CommentFeed"}}, "get": {"scopes": ["https://www.googleapis.com/auth/plus.me"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}}, "id": "plus.comments.get", "httpMethod": "GET", "path": "comments/{commentId}", "response": {"$ref": "Comment"}}}}', true));
mod/..prova.txt:gdrive/vendor/google/contrib/apiBloggerService.php:    $this->comments = new CommentsServiceResource($this, $this->serviceName, 'comments', json_decode('{"methods": {"list": {"scopes": ["https://www.googleapis.com/auth/blogger"], "parameters": {"startDate": {"type": "string", "location": "query"}, "postId": {"required": true, "type": "string", "location": "path"}, "maxResults": {"format": "uint32", "type": "integer", "location": "query"}, "pageToken": {"type": "string", "location": "query"}, "fetchBodies": {"type": "boolean", "location": "query"}, "blogId": {"required": true, "type": "string", "location": "path"}}, "id": "blogger.comments.list", "httpMethod": "GET", "path": "blogs/{blogId}/posts/{postId}/comments", "response": {"$ref": "CommentList"}}, "get": {"scopes": ["https://www.googleapis.com/auth/blogger"], "parameters": {"commentId": {"required": true, "type": "string", "location": "path"}, "postId": {"required": true, "type": "string", "location": "path"}, "blogId": {"required": true, "type": "string", "location": "path"}}, "id": "blogger.comments.get", "httpMethod": "GET", "path": "blogs/{blogId}/posts/{postId}/comments/{commentId}", "response": {"$ref": "Comment"}}}}', true));
mod/chat/vendors/freichat/installation/integ/base.php:            if ($token[0] == 366 || $token[0] == 365 || $token[0] == 370) //we dont need comments and whitespaces
mod/chat/vendors/freichat/server/admin_files/_file_send/mimetypes.txt:application/vnd.openxmlformats-officedocument.presentationml.comments+xml
mod/chat/vendors/freichat/server/admin_files/_file_send/mimetypes.txt:application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml
mod/chat/vendors/freichat/server/admin_files/_file_send/mimetypes.txt:application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml
mod/chat/vendors/freichat/server/admin_files/theme_maker/theme_maker.php: // Remove comments    
mod/chat/vendors/freichat/client/plugins/translate/js/jquery.translate-1.3.9.min.js:;(function($){function Nct(){}Nct.prototype={init:function(jq,o){this.textArray=[];this.elements=[];this.options=o;this.jquery=jq;this.n=-1;if(o.async===true)o.async=2;if(o.not){jq=jq.not(o.not);jq=jq.add(jq.find("*").not(o.not)).not($(o.not).find("*"))}else jq=jq.add(jq.find("*"));this.jq=jq;this.jql=this.jq.length;return this.process()},process:function(){this.n++;var that=this,o=this.options,text="",hasTextNode=false,hasChildNode=false,el=this.jq[this.n],e,c,ret;if(this.n===this.jql){ret=this.jquery.pushStack(this.elements,"nodesContainingText");o.complete.call(ret,ret,this.textArray);if(o.returnAll===false&&o.walk===false)return this.jquery;return ret}if(!el)return this.process();e=$(el);var nodeName=el.nodeName.toUpperCase(),type=nodeName==="INPUT"&&$.attr(el,"type").toLowerCase();if(({SCRIPT:1,NOSCRIPT:1,STYLE:1,OBJECT:1,IFRAME:1})[nodeName])return this.process();if(typeof o.subject==="string"){text=e.attr(o.subject)}else{if(o.altAndVal&&(nodeName==="IMG"||type==="image"))text=e.attr("alt");else if(o.altAndVal&&({text:1,button:1,submit:1})[type])text=e.val();else if(nodeName==="TEXTAREA")text=e.val();else{c=el.firstChild;if(o.walk!==true)hasChildNode=true;else{while(c){if(c.nodeType==1){hasChildNode=true;break}c=c.nextSibling}}if(!hasChildNode)text=e.text();else{if(o.walk!==true)hasTextNode=true;c=el.firstChild;while(c){if(c.nodeType==3&&c.nodeValue.match(/\S/)!==null){if(c.nodeValue.match(/<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)>/)!==null){if(c.nodeValue.match(/(\S+(?=.*<))|(>(?=.*\S+))/)!==null){hasTextNode=true;break}}else{hasTextNode=true;break}}c=c.nextSibling}if(hasTextNode){text=e.html();text=o.stripScripts?text.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi,""):text;this.jq=this.jq.not(e.find("*"))}}}}if(!text)return this.process();this.elements.push(el);this.textArray.push(text);o.each.call(el,this.elements.length-1,el,text);if(o.async){setTimeout(function(){that.process()},o.async);return this.jquery}else return this.process()}};var defaults={not:"",async:false,each:function(){},complete:function(){},comments:false,returnAll:true,walk:true,altAndVal:false,subject:true,stripScripts:true};$.fn.nodesContainingText=function(o){o=$.extend({},defaults,$.fn.nodesContainingText.defaults,o);return new Nct().init(this,o)};$.fn.nodesContainingText.defaults=defaults})(jQuery);(function($){function $function(){}var True=true,False=false,undefined,replace="".replace,Str=String,Fn=Function,Obj=Object,GL,GLL,toLangCode,inverseLanguages={},loading,readyList=[],defaults={from:"",to:"",start:$function,error:$function,each:$function,complete:$function,onTimeout:$function,timeout:0,stripComments:True,stripWhitespace:True,stripScripts:True,separators:/\.\?\!;:/,limit:500,walk:True,returnAll:False,replace:True,rebind:True,data:True,setLangAttr:False,subject:True,not:"",altAndVal:True,async:False,toggle:True,fromOriginal:True,parallel:false,trim:true,alwaysReplace:false};function loaded(){$.translate.GL=GL=google.language;$.translate.GLL=GLL=GL.Languages;toLangCode=$.translate.toLanguageCode;$.each(GLL,function(l,lc){inverseLanguages[lc.toUpperCase()]=l});$.translate.isReady=True;var fn;while((fn=readyList.shift()))fn()}function filter(obj,fn){var newObj={};$.each(obj,function(lang,langCode){if(fn(langCode,lang)===True)newObj[lang]=langCode});return newObj}function bind(fn,thisObj,args){return function(){return fn.apply(thisObj===True?arguments[0]:thisObj,args||arguments)}}function isSet(e){return e!==undefined}function validate(_args,overload,error){var matched,obj={},args=$.grep(_args,isSet);$.each(overload,function(_,el){var matches=$.grep(el[0],function(e,i){return isSet(args[i])&&args[i].constructor===e}).length;if(matches===args.length&&matches===el[0].length&&(matched=True)){$.each(el[1],function(i,prop){obj[prop]=args[i]});return False}});if(!matched)throw error;return obj}function getOpt(args0,_defaults){var args=validate(args0,$.translate.overload,"jQuery.translate: Invalid arguments"),o=args.options||{};delete args.options;o=$.extend({},defaults,_defaults,$.extend(o,args));if(o.fromOriginal)o.toggle=True;if(o.toggle)o.data=True;if(o.async===True)o.async=2;return o}function T(){this.extend($.translate);delete this.defaults;delete this.fn}T.prototype={version:"1.4.7",_init:function(t,o){var separator=o.separators.source||o.separators,isString=this.isString=typeof t==="string",lastpos=0,substr;$.each(["stripComments","stripScripts","stripWhitespace"],function(i,name){var fn=$.translate[name];if(o[name])t=isString?fn(t):$.map(t,fn)});this.rawSource="<div>"+(isString?t:t.join("</div><div>"))+"</div>";this._m3=new RegExp("["+separator+"](?![^"+separator+"]*["+separator+"])");this.options=o;this.from=o.from=toLangCode(o.from)||"";this.to=o.to=toLangCode(o.to)||"";this.source=t;this.rawTranslation="";this.translation=[];this.i=0;this.stopped=False;this.elements=o.nodes;this._i=-1;this.rawSources=[];while(True){substr=this.truncate(this.rawSource.substr(lastpos),o.limit);if(!substr)break;this.rawSources.push(substr);lastpos+=substr.length}this.queue=new Array(this.rawSources.length);this.done=0;o.start.call(this,t,o.from,o.to,o);if(o.timeout)this.timeout=setTimeout(bind(o.onTimeout,this,[t,o.from,o.to,o]),o.timeout);(o.toggle&&o.nodes)?(o.textNodes?this._toggleTextNodes():this._toggle()):this._process()},_process:function(){if(this.stopped)return;var o=this.options,i=this.rawTranslation.length,lastpos,subst,divst,divcl;var that=this;while((lastpos=this.rawTranslation.lastIndexOf("</div>",i))>-1){i=lastpos-1;subst=this.rawTranslation.substr(0,i+1);divst=subst.match(/<div[> ]/gi);divcl=subst.match(/<\/div>/gi);divst=divst?divst.length:0;divcl=divcl?divcl.length:0;if(divst!==divcl+1)continue;var divscompl=$(this.rawTranslation.substr(0,i+7)),divlen=divscompl.length,l=this.i;if(l===divlen)break;divscompl.slice(l,divlen).each(bind(function(j,e){if(this.stopped)return False;var e_html=$(e).html(),tr=o.trim?$.trim(e_html):e_html,i=l+j,src=this.source,from=!this.from&&this.detectedSourceLanguage||this.from;this.translation[i]=tr;this.isString?this.translation=tr:src=this.source[i];o.each.call(this,i,tr,src,from,this.to,o);this.i++},this));break}if(this.rawSources.length-1==this._i)this._complete();var _translate=bind(this._translate,this);if(o.parallel){if(this._i<0){if(!o.parallel){$.each(this.rawSources,_translate)}else{var j=0,n=this.rawSources.length;function seq(){_translate();if(j<n)setTimeout(seq,o.parallel)}seq()}}}else _translate()},_translate:function(){this._i++;var i=this._i,src=this.rawSourceSub=this.rawSources[i];if(!src)return;GL.translate(src,this.from,this.to,bind(function(result){if(result.error)return this.options.error.call(this,result.error,this.rawSourceSub,this.from,this.to,this.options);this.queue[i]=result.translation||this.rawSourceSub;this.detectedSourceLanguage=result.detectedSourceLanguage;this._check()},this))},_check:function(){if(!this.options.parallel){this.rawTranslation+=this.queue[this._i];this._process();return}var done=0;jQuery.each(this.queue,function(i,n){if(n!=undefined)done=i;else return false});if((done>this.done)||(done===this.queue.length-1)){for(var i=0;i<=done;i++)this.rawTranslation+=this.queue[i];this._process()}this.done=done},_complete:function(){clearTimeout(this.timeout);this.options.complete.call(this,this.translation,this.source,!this.from&&this.detectedSourceLanguage||this.from,this.to,this.options)},stop:function(){if(this.stopped)return this;this.stopped=True;this.options.error.call(this,{message:"stopped"});return this}};$.translate=function(t,a){if(t==undefined)return new T();if($.isFunction(t))return $.translate.ready(t,a);var that=new T();var args=[].slice.call(arguments,0);args.shift();return $.translate.ready(bind(that._init,that,[t,getOpt(args,$.translate.defaults)]),False,that)};$.translate.fn=$.translate.prototype=T.prototype;$.translate.fn.extend=$.translate.extend=$.extend;$.translate.extend({_bind:bind,_filter:filter,_validate:validate,_getOpt:getOpt,_defaults:defaults,defaults:$.extend({},defaults),capitalize:function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()},truncate:function(text,limit){var i,m1,m2,m3,m4,t,encoded=encodeURIComponent(text);for(i=0;i<10;i++){try{t=decodeURIComponent(encoded.substr(0,limit-i))}catch(e){continue}if(t)break}return(!(m1=/<(?![^<]*>)/.exec(t)))?((!(m2=/>\s*$/.exec(t)))?((m3=this._m3.exec(t))?((m4=/>(?![^>]*<)/.exec(t))?(m3.index>m4.index?t.substring(0,m3.index+1):t.substring(0,m4.index+1)):t.substring(0,m3.index+1)):t):t):t.substring(0,m1.index)},getLanguages:function(a,b){if(a==undefined||(b==undefined&&!a))return GLL;var newObj={},typeof_a=typeof a,languages=b?$.translate.getLanguages(a):GLL,filterArg=(typeof_a==="object"||typeof_a==="function")?a:b;if(filterArg)if(filterArg.call)newObj=filter(languages,filterArg);else for(var i=0,length=filterArg.length,lang;i<length;i++){lang=$.translate.toLanguage(filterArg[i]);if(languages[lang]!=undefined)newObj[lang]=languages[lang]}else newObj=filter(GLL,GL.isTranslatable);return newObj},toLanguage:function(a,format){var u=a.toUpperCase();var l=inverseLanguages[u]||(GLL[u]?u:undefined)||inverseLanguages[($.translate.languageCodeMap[a.toLowerCase()]||"").toUpperCase()];return l==undefined?undefined:format==="lowercase"?l.toLowerCase():format==="capitalize"?$.translate.capitalize(l):l},toLanguageCode:function(a){return GLL[a]||GLL[$.translate.toLanguage(a)]||$.translate.languageCodeMap[a.toLowerCase()]},same:function(a,b){return a===b||toLangCode(a)===toLangCode(b)},isTranslatable:function(l){return GL.isTranslatable(toLangCode(l))},languageCodeMap:{"pt":"pt-PT","pt-br":"pt-PT","he":"iw","zlm":"ms","zh-hans":"zh-CN","zh-hant":"zh-TW"},isRtl:{"ar":True,"iw":True,"fa":True,"ur":True,"yi":True},getBranding:function(){return $(GL.getBranding.apply(GL,arguments))},load:function(key,version){loading=True;function _load(){google.load("language",version||"1",{"callback":loaded})}if(typeof google!=="undefined"&&google.load)_load();else $.getScript(((document.location.protocol=="https:")?"https://":"http://")+"www.google.com/jsapi"+(key?"?key="+key:""),_load);return $.translate},ready:function(fn,preventAutoload,that){$.translate.isReady?fn():readyList.push(fn);if(!loading&&!preventAutoload)$.translate.load();return that||$.translate},isReady:False,overload:[[[],[]],[[Str,Str,Obj],["from","to","options"]],[[Str,Obj],["to","options"]],[[Obj],["options"]],[[Str,Str],["from","to"]],[[Str],["to"]],[[Str,Str,Fn],["from","to","complete"]],[[Str,Fn],["to","complete"]]],stripScripts:bind(replace,True,[/<script[^>]*>([\s\S]*?)<\/script>/gi,""]),stripWhitespace:bind(replace,True,[/\s\s+/g," "]),stripComments:bind(replace,True,[/<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)>/g,""])})})(jQuery);(function($){var True=true,isInput={text:True,button:True,submit:True},dontCopyEvents={SCRIPT:True,NOSCRIPT:True,STYLE:True,OBJECT:True,IFRAME:True},$fly=$([]);$fly.length=1;function getDoc(node){while(node&&node.nodeType!=9)node=node.parentNode;return node}function toggleDir(e,dir){var align=e.css("text-align");e.css("direction",dir);if(align==="right")e.css("text-align","left");if(align==="left")e.css("text-align","right")}function getType(el,o){var nodeName=el.nodeName.toUpperCase(),type=nodeName==='INPUT'&&$.attr(el,'type').toLowerCase();o=o||{altAndVal:True,subject:True};return typeof o.subject==="string"?o.subject:o.altAndVal&&(nodeName==='IMG'||type==="image")?"alt":o.altAndVal&&isInput[type]?"$val":nodeName==="TEXTAREA"?"$val":"$html"}$.translate.fn._toggle=function(){var o=this.options,to=o.to,stop;this.elements.each($.translate._bind(function(i,el){this.i=i;var e=$(el),tr=$.translate.getData(e,to,o);if(!tr)return!(stop=True);this.translation.push(tr);o.each.call(this,i,el,tr,this.source[i],this.from,to,o)},this));!stop?this._complete():this._process()};$.translate.extend({_getType:getType,each:function(i,el,t,s,from,to,o){$fly[0]=el;$.translate.setData($fly,to,t,from,s,o);$.translate.replace($fly,t,to,o);$.translate.setLangAttr($fly,to,o)},getData:function(e,lang,o){var el=e[0]||e,data=$.data(el,"translation");return data&&data[lang]&&data[lang][getType(el,o)]},setData:function(e,to,t,from,s,o){if(o&&!o.data)return;var el=e[0]||e,type=getType(el,o),data=$.data(el,"translation");data=data||$.data(el,"translation",{});(data[from]=data[from]||{})[type]=s;(data[to]=data[to]||{})[type]=t},replace:function(e,t,to,o){if(o&&!o.replace)return;if(o&&typeof o.subject==="string")return e.attr(o.subject,t);var el=e[0]||e,nodeName=el.nodeName.toUpperCase(),type=nodeName==='INPUT'&&$.attr(el,'type').toLowerCase(),isRtl=$.translate.isRtl,lang=$.data(el,"lang");if(!o.alwaysReplace)if(lang===to)return;if(isRtl[to]!==isRtl[lang||o&&o.from]){if(isRtl[to])toggleDir(e,"rtl");else if(e.css("direction")==="rtl")toggleDir(e,"ltr")}if((!o||o.altAndVal)&&(nodeName==='IMG'||type==="image"))e.attr("alt",t);else if(nodeName==="TEXTAREA"||(!o||o.altAndVal)&&isInput[type])e.val(t);else{if(!o||o.rebind){this.doc=this.doc||getDoc(el);var origContents=e.find("*").not("script"),newElem=$(this.doc.createElement("div")).html(t);$.translate.copyEvents(origContents,newElem.find("*"));e.html(newElem.contents())}else e.html(t)}$.data(el,"lang",to)},setLangAttr:function(e,to,o){if(!o||o.setLangAttr)e.attr((!o||o.setLangAttr===True)?"lang":o.setLangAttr,to)},copyEvents:function(from,to){to.each(function(i,to_i){var from_i=from[i];if(!to_i||!from_i)return false;if(dontCopyEvents[from_i.nodeName.toUpperCase()])return True;var events=$.data(from_i,"events");if(!events)return True;for(var type in events)for(var handler in events[type])$.event.add(to_i,type,events[type][handler],events[type][handler].data)})}});$.fn.translate=function(a,b,c){var o=$.translate._getOpt(arguments,$.fn.translate.defaults),ncto=$.extend({},$.translate._defaults,$.fn.translate.defaults,o,{complete:function(e,t){$.translate(function(){var from=$.translate.toLanguageCode(o.from);if(o.fromOriginal)e.each(function(i,el){$fly[0]=el;var data=$.translate.getData($fly,from,o);if(!data)return true;t[i]=data});var each=o.each;function unshiftArgs(method){return function(){[].unshift.call(arguments,this.elements);method.apply(this,arguments)}}o.nodes=e;o.start=unshiftArgs(o.start);o.onTimeout=unshiftArgs(o.onTimeout);o.complete=unshiftArgs(o.complete);o.each=function(i){var args=arguments;if(arguments.length!==7)[].splice.call(args,1,0,this.elements[i]);this.each.apply(this,args);each.apply(this,args)};$.translate(t,o)})},each:function(){}});if(this.nodesContainingText)return this.nodesContainingText(ncto);o.nodes=this;$.translate($.map(this,function(e){return $(e).html()||$(e).val()}),o);return this};$.fn.translate.defaults=$.extend({},$.translate._defaults)})(jQuery);(function($){function getTextNodes(root,_filter){var nodes=[],skip={SCRIPT:1,NOSCRIPT:1,STYLE:1,IFRAME:1},notType=typeof _filter,filter=notType==="string"?function(node){return!$(node).is(_filter)}:notType==="function"?_filter:null;function recurse(_,root){var i=0,children=root.childNodes,l=children.length,node;for(;i<l;i++){node=children[i];if(node.nodeType==3&&/\S/.test(node.nodeValue))nodes.push(node);else if(node.nodeType==1&&!skip[node.nodeName.toUpperCase()]&&(!filter||filter(node)))recurse(null,node)}}$.each((root.length&&!root.nodeName)?root:[root],recurse);return nodes}function toggleDir(e,dir){var align=e.css("text-align");e.css("direction",dir);if(align==="right")e.css("text-align","left");if(align==="left")e.css("text-align","right")}function setLangAttr(e,to,o){if(!o||o.setLangAttr)$(e).attr((!o||o.setLangAttr===true)?"lang":o.setLangAttr,to)}function replace(parent,node,text,to,o){if(!o.replace)return;var isRtl=$.translate.isRtl,lang=$.data(parent,"lang");if(isRtl[to]!==isRtl[lang||o&&o.from]){var $parent=$(parent);if(isRtl[to])toggleDir($parent,"rtl");else if($parent.css("direction")==="rtl")toggleDir($parent,"ltr")}$.data(parent,"lang",to);if(text!=node.nodeValue){var newTextNode=document.createTextNode(text);parent.replaceChild(newTextNode,node);return newTextNode}return node}function setData(parent,o,src,trnsl){if(o.data){var TR="translation";if(!$.data(parent,TR))$.data(parent,TR,{});if(!$.data(parent,TR)[o.from])$.data(parent,TR)[o.from]=[];[].push.call($.data(parent,TR)[o.from],src);if(!$.data(parent,TR)[o.to])$.data(parent,TR)[o.to]=[];[].push.call($.data(parent,TR)[o.to],trnsl)}}function getData(parent,lang,that){that._childIndex=that._prevParent===parent?that._childIndex+1:0;var tr=$.data(parent,"translation");that._prevParent=parent;return tr&&tr[lang]&&tr[lang][that._childIndex]}function _each(i,textNode,t,s,from,to,o){t=t.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&').replace(/&quot;/g,'"').replace(/&#39;|&apos;/g,"'");var parent=textNode.parentNode;setData(parent,o,s,t);var newTextNode=replace(parent,textNode,t,to,o);setLangAttr(parent,o.to,o);return newTextNode}$.translateTextNodes=function(root){var args=[].slice.call(arguments,0);args.shift();$.translate(function(){var o=$.translate._getOpt(args,$.translateTextNodes.defaults),each=o.each,nodes=getTextNodes(root,o.not),contents=$.map(nodes,function(n){return n.nodeValue}),from=$.translate.toLanguageCode(o.from),obj={};o.nodes=nodes;o.textNodes=true;o.trim=false;if(o.fromOriginal)$.each(nodes,function(i,textNode){var data=getData(textNode.parentNode,from,obj);if(!data)return true;contents[i]=data});function unshiftArgs(method){return function(){[].unshift.call(arguments,this.elements);method.apply(this,arguments)}}o.start=unshiftArgs(o.start);o.onTimeout=unshiftArgs(o.onTimeout);o.complete=unshiftArgs(o.complete);o.each=function(i){var args=arguments;if(arguments.length!==7)[].splice.call(args,1,0,this.elements[i]);this.elements[i]=args[1]=_each.apply(this,args);each.apply(this,args)};$.translate(contents,o)})};$.translate.fn._toggleTextNodes=function(){var o=this.options,to=o.to,stop;$.each(this.elements,$.translate._bind(function(i,textNode){this.i=i;var parent=textNode.parentNode,tr=getData(parent,to,this);if(!tr)return!(stop=true);this.translation.push(tr);o.each.call(this,i,textNode,tr,this.source[i],this.from,to,o)},this));!stop?this._complete():this._process()};$.fn.translateTextNodes=function(a,b,c){[].unshift.call(arguments,this);$.translateTextNodes.apply(null,arguments);return this};$.translateTextNodes.defaults=$.fn.translateTextNodes.defaults=$.extend({},$.translate._defaults)})(jQuery);(function($){var defaults={tags:["select","option"],filter:$.translate.isTranslatable,label:$.translate.toNativeLanguage||function(langCode,lang){return $.translate.capitalize(lang)},includeUnknown:false};$.translate.ui=function(){var o={},str='',cs='',cl='';if(typeof arguments[0]==="string")o.tags=$.makeArray(arguments);else o=arguments[0];o=$.extend({},defaults,$.translate.ui.defaults,o);if(o.tags[2]){cs='<'+o.tags[2]+'>';cl='</'+o.tags[2]+'>'}var languages=$.translate.getLanguages(o.filter);if(!o.includeUnknown)delete languages.UNKNOWN;$.each(languages,function(l,lc){str+=('<'+o.tags[1]+" value="+lc+'>'+cs+o.label(lc,l)+cl+'</'+o.tags[1]+'>')});return $('<'+o.tags[0]+' class="jq-translate-ui">'+str+'</'+o.tags[0]+'>')};$.translate.ui.defaults=$.extend({},defaults)})(jQuery);jQuery.translate.fn.progress=function(selector,options){if(!this.i)this._pr=0;this._pr+=this.source[this.i].length;var progress=100*this._pr/(this.rawSource.length-(11*(this.i+1)));if(selector){var e=jQuery(selector);if(!this.i&&!e.hasClass("ui-progressbar"))e.progressbar(options);e.progressbar("option","value",progress)}return progress};(function($){$.translate.extend({toNativeLanguage:function(lang){return $.translate.nativeLanguages[lang]||$.translate.nativeLanguages[$.translate.toLanguageCode(lang)]},nativeLanguages:{"af":"Afrikaans","be":"Беларуская","is":"Íslenska","ga":"Gaeilge","mk":"Македонски","ms":"Bahasa Melayu","sw":"Kiswahili","cy":"Cymraeg","yi":"ייִדיש","sq":"Shqipe","ar":"العربية","bg":"Български","ca":"Català","zh":"中文","zh-CN":"简体中文","zh-TW":"繁體中文","hr":"Hrvatski","cs":"Čeština","da":"Dansk","nl":"Nederlands","en":"English","et":"Eesti","tl":"Tagalog","fi":"Suomi","fr":"Français","gl":"Galego","de":"Deutsch","el":"Ελληνικά","iw":"עברית","hi":"हिन्दी","hu":"Magyar","id":"Bahasa Indonesia","it":"Italiano","ja":"日本語","ko":"한국어","lv":"Latviešu","lt":"Lietuvių","mt":"Malti","no":"Norsk","fa":"فارسی","pl":"Polski","pt-PT":"Português","ro":"Român","ru":"Русский","sr":"Српски","sk":"Slovenský","sl":"Slovenski","es":"Español","sv":"Svenska","th":"ไทย","tr":"Türkçe","uk":"Українська","vi":"Tiếng Việt"}})})(jQuery);(function($){$.translate.extend({defer:function(){return $.translate._bind($.translate,null,arguments)},run:function(array,finished){var count=array.length;$.each(array,function(){var inst=this(),complete=inst.options.complete;inst.options.complete=function(){complete.apply(this,arguments);if(!--count)finished()}})}})})(jQuery);
mod/chat/vendors/freichat/readme.txt:   that the top comments are in every language file
mod/river_comments/ping.php:	* river_comments
mod/river_comments/ping.php:	$pluginversion = river_comments_get_version();
mod/river_comments/ping.php:	$pluginrelease = river_comments_get_version(true);
mod/river_comments/ping.php:			'pluginname' => 'river_comments',
mod/river_comments/ping.php:	system_message(elgg_echo('river_comments:ping:thanks'));
mod/river_comments/manifest.xml:	<field key="description" value="Let the users to comments inline in the riverdashboard." />
mod/river_comments/endpoint/comment.php:	* river_comments
mod/river_comments/allcomments.php:	* river_comments
mod/river_comments/allcomments.php:	$title = sprintf(elgg_echo('river_comments:allcommentsof'), $title);
mod/river_comments/allcomments.php:	$comments_count = (int) count_annotations($entity_guid, "", "", 'generic_comment');
mod/river_comments/allcomments.php:		$content = list_annotations($entity_guid, 'generic_comment', $comments_count);
mod/river_comments/allcomments.php:		$comments_offset = 0;
mod/river_comments/allcomments.php:		$comments_limit = $comments_count;
mod/river_comments/allcomments.php:		if ($comments_count > 2) {
mod/river_comments/allcomments.php:			$comments_limit -= 2;  
mod/river_comments/allcomments.php:		$comments = get_annotations($entity_guid, "", "", 'generic_comment', "", "", $comments_limit, $comments_offset);
mod/river_comments/allcomments.php:		foreach($comments as $comment) {
mod/river_comments/allcomments.php:			$content .= elgg_view('river_comments/river_comment', array(
mod/river_comments/README.txt:river_comments
mod/river_comments/README.txt:Allow comments on river activity
mod/river_comments/README.txt:river_comments is released under the GNU Public License (GPL), which
mod/river_comments/views/default/developed_by_keetup.php:	* river_comments
mod/river_comments/views/default/developed_by_keetup.php:	<a href="http://www.keetup.com/?r=true&from=plugin&who=<?php echo urlencode('river_comments') ?>" target="_blank">
mod/river_comments/views/default/developed_by_keetup.php:		<img border="0" title="keetup development, proffesional elgg services, elgg developer, php experts, mysql experts, elgg customizations, assistance in elgg" alt="Plugin developed by Keetup, Elgg development" src="<?php echo $vars['url']?>mod/river_comments/graphics/developed-by-keetup.png" />
mod/river_comments/views/default/river/item/wrapper.php:	* river_comments
mod/river_comments/views/default/input/form_footer.php:	* river_comments
mod/river_comments/views/default/input/form_header.php:	* river_comments
mod/river_comments/views/default/settings/river_comments/edit.php:	* river_comments
mod/river_comments/views/default/settings/river_comments/edit.php:	run_function_once("river_comments_question_for_ping");
mod/river_comments/views/default/settings/river_comments/edit.php:		echo elgg_view('river_comments/question/wrapper');
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:enable_ajaxsupport'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<h3><?php echo elgg_echo('river_comments:admin:subtitle') ?></h3>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:thewire'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:blog'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:page'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:topic'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:tidypics_image'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:tidypics_album'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:izap_videos'); ?>
mod/river_comments/views/default/settings/river_comments/edit.php:	<?php echo elgg_echo('river_comments:show:event_calendar'); ?>
mod/river_comments/views/default/river_comments/riverdashboardjs.php:	* river_comments
mod/river_comments/views/default/river_comments/river_comment.php:	* river_comments
mod/river_comments/views/default/river_comments/river_comment.php:	$body = elgg_view('river_comments/comment/icon', $vars);
mod/river_comments/views/default/river_comments/river_comment.php:	$body .= elgg_view('river_comments/comment/content', $vars);
mod/river_comments/views/default/river_comments/river_comment.php:	echo elgg_view('river_comments/comment/wrapper', array_merge($vars, array('body' => $body)));
mod/river_comments/views/default/river_comments/item_action.php:	· <a <?php echo $js_action; ?>class='jump_to_comment' href="#"><?php echo elgg_echo('river_comments:comment')?></a>
mod/river_comments/views/default/river_comments/css.php:	* river_comments
mod/river_comments/views/default/river_comments/css.php:	//River comments css
mod/river_comments/views/default/river_comments/css.php:	/*List comments*/
mod/river_comments/views/default/river_comments/css.php:		background: transparent url(<?php echo $vars['url']?>mod/river_comments/graphics/river_icon_comment.png) no-repeat;
mod/river_comments/views/default/river_comments/css.php:		background: transparent url(<?php echo $vars['url']?>mod/river_comments/graphics/loading.gif) no-repeat center right;
mod/river_comments/views/default/river_comments/comment/content.php:	* river_comments
mod/river_comments/views/default/river_comments/comment/wrapper.php:	* river_comments
mod/river_comments/views/default/river_comments/comment/icon.php:	* river_comments
mod/river_comments/views/default/river_comments/js.php:	* river_comments
mod/river_comments/views/default/river_comments/js.php:	//River comments js
mod/river_comments/views/default/river_comments/js.php:			if (get_plugin_setting('enable_ajaxsupport', 'river_comments') != 'no') {
mod/river_comments/views/default/river_comments/js.php:				oObjectToClose.val("<?php echo elgg_echo('river_comments:writeacomment'); ?>");
mod/river_comments/views/default/river_comments/js.php:			if (oObject.val() ==  "<?php echo elgg_echo('river_comments:writeacomment'); ?>") {
mod/river_comments/views/default/river_comments/js.php:			oMaster = oObject.parents('.feed_comments');
mod/river_comments/views/default/river_comments/js.php:			//Prepare for delete...when the comments are loaded
mod/river_comments/views/default/river_comments/js.php:				   oParent.parents('.feed_comments').prepend(data);
mod/river_comments/views/default/river_comments/js.php:				   oParent.parents('.feed_comments').find('.to_remove').remove();
mod/river_comments/views/default/river_comments/js.php:					oTextArea.after("<span class='river_error'><?php echo elgg_echo('river_comments:notloginerror')?></span>");
mod/river_comments/views/default/river_comments/js.php:			oMaster = oObject.parents('.feed_comments');
mod/river_comments/views/default/river_comments/js.php:			endpoint = "<?php echo $vars['url'] ?>mod/river_comments/endpoint/comment.php";
mod/river_comments/views/default/river_comments/js.php:						oTextArea.after("<span class='river_error'><?php echo elgg_echo('river_comments:notloginerror')?></span>");
mod/river_comments/views/default/river_comments/js.php:				//Reset the textarea for write comments
mod/river_comments/views/default/river_comments/js.php:				oTextArea.val("<?php echo elgg_echo('river_comments:writeacomment'); ?>");
mod/river_comments/views/default/river_comments/question/content.php:	* river_comments
mod/river_comments/views/default/river_comments/question/content.php:	<div id="river_comments_lbBack" class='lbBack'>&nbsp;</div>
mod/river_comments/views/default/river_comments/question/content.php:	<div id="river_comments_lb" class="lbBase lbParticular">
mod/river_comments/views/default/river_comments/question/content.php:			<h2><?php echo elgg_echo('river_comments:ping:title'); ?></h2>
mod/river_comments/views/default/river_comments/question/content.php:				<?php echo elgg_echo('river_comments:ping:description'); ?>
mod/river_comments/views/default/river_comments/question/content.php:			<form method='post' action='<?php echo $vars['url']?>mod/river_comments/ping.php'>
mod/river_comments/views/default/river_comments/question/content.php:				<p><?php echo elgg_echo('river_comments:ping:description2'); ?> <small>(<?php echo elgg_echo('river_comments:ping:description3'); ?>)</small>.<br /></p>
mod/river_comments/views/default/river_comments/question/content.php:						<?php echo elgg_echo('river_comments:ping:cancel'); ?>
mod/river_comments/views/default/river_comments/question/content.php:						<?php echo elgg_echo('river_comments:ping'); ?>
mod/river_comments/views/default/river_comments/question/wrapper.php:	* river_comments
mod/river_comments/views/default/river_comments/question/wrapper.php:        	$('#river_comments_lbBack').css('width', $(window).width() + 'px');
mod/river_comments/views/default/river_comments/question/wrapper.php:            $('#river_comments_lbBack').css('height', $(document).height() + 'px');
mod/river_comments/views/default/river_comments/question/wrapper.php:            lbOpacity('#river_comments_lbBack', 70);
mod/river_comments/views/default/river_comments/question/wrapper.php:			$('#river_comments_lbBack').fadeIn('normal', function() {$(lb).fadeIn('normal');});
mod/river_comments/views/default/river_comments/question/wrapper.php:        	$('#river_comments_lb').fadeOut('normal', function() {$('#river_comments_lbBack').fadeOut('normal');});
mod/river_comments/views/default/river_comments/question/wrapper.php:        	$('#river_comments_lb .lbContent').attr('class','lbContent');
mod/river_comments/views/default/river_comments/question/wrapper.php:			lbShow('#river_comments_lb');
mod/river_comments/views/default/river_comments/question/wrapper.php:	        $('#river_comments_lbBack, #river_comments_lb .lbCerrar').click(function() {	
mod/river_comments/views/default/river_comments/question/wrapper.php:				if($('#river_comments_lb').is(':visible')) {
mod/river_comments/views/default/river_comments/question/wrapper.php:					lbCenterVert($('#river_comments_lb'));
mod/river_comments/views/default/river_comments/footer.php:	* river_comments
mod/river_comments/views/default/river_comments/footer.php:	<script type="text/javascript" src="<?php echo $vars['url']; ?>mod/river_comments/vendors/jquery.elastic/jquery.elastic.js"></script>
mod/river_comments/views/default/river_comments/comments.php:	* river_comments
mod/river_comments/views/default/river_comments/comments.php:	//Get the comments
mod/river_comments/views/default/river_comments/comments.php:	$comments_count = (int) count_annotations($object->getGUID(), "", "", 'generic_comment');
mod/river_comments/views/default/river_comments/comments.php:		<div class="feed_comments">
mod/river_comments/views/default/river_comments/comments.php:			$comments_offset = 0;
mod/river_comments/views/default/river_comments/comments.php:			$comments_limit = $comments_count;
mod/river_comments/views/default/river_comments/comments.php:			if ($comments_count > 0) {
mod/river_comments/views/default/river_comments/comments.php:				if ($comments_count > 3) {
mod/river_comments/views/default/river_comments/comments.php:					$comments_offset = $comments_limit-2;
mod/river_comments/views/default/river_comments/comments.php:					$comment_reduced = sprintf(elgg_echo('river_comments:viewallcomments'), $comments_count);
mod/river_comments/views/default/river_comments/comments.php:					$link = "{$vars['url']}pg/river_comments/allcomments/?guid=$object->guid";
mod/river_comments/views/default/river_comments/comments.php:					echo elgg_view('river_comments/comment/wrapper', array(
mod/river_comments/views/default/river_comments/comments.php:				$comments = get_annotations($object->getGUID(), "", "", 'generic_comment', "", "", $comments_limit, $comments_offset);
mod/river_comments/views/default/river_comments/comments.php:				foreach($comments as $comment) {
mod/river_comments/views/default/river_comments/comments.php:					echo elgg_view('river_comments/river_comment', array(
mod/river_comments/views/default/river_comments/comments.php:						<textarea <?php echo $js ?>name="river_comment_text"><?php echo elgg_echo('river_comments:writeacomment'); ?></textarea>
mod/river_comments/views/default/river_comments/comments.php:							<input type="submit" name="comment" value="<?php echo elgg_echo('river_comments:comment'); ?>" />
mod/river_comments/views/default/river_comments/comments.php:		</div><!-- feed_comments -->
mod/river_comments/views/default/river_comments/version.php:	* river_comments
mod/river_comments/views/default/river_comments/version.php:	$version = river_comments_get_version();
mod/river_comments/views/default/river_comments/version.php:	$release = river_comments_get_version(true);
mod/river_comments/vendors/jquery.elastic/dependencies/jquery-1.3.2.js:	// Make sure no comments are found
mod/river_comments/vendors/jquery.elastic/dependencies/jquery-1.3.2.js:			// Filter out possible comments
mod/river_comments/actions/uncomment.php:	* river_comments
mod/river_comments/actions/comment.php:	* river_comments
mod/river_comments/actions/comment.php:			echo elgg_view('river_comments/river_comment', array(
mod/river_comments/languages/en.php:	* river_comments
mod/river_comments/languages/en.php:			'river_comments:admin' => 'River Comments Settings',
mod/river_comments/languages/en.php:			'river_comments:ping:title' => 'River Comments Plugin',
mod/river_comments/languages/en.php:			'river_comments:ping:description' => 'Help us to improve the quality of this plugin. This program will send minimal information (elgg version, site url, name of the plugin) just once to the keetup.com servers to know the majority elgg versions the users have installed. Then we can focus on that particular versions.',
mod/river_comments/languages/en.php:			'river_comments:ping:description2' => 'We can also send to you a notification when we release new versions of this plugin so please add your email address',
mod/river_comments/languages/en.php:			'river_comments:ping:description3' => 'this will be used just to that end',
mod/river_comments/languages/en.php:			'river_comments:ping:thanks' => 'Thanks for help us',
mod/river_comments/languages/en.php:			'river_comments:ping:cancel' => 'No, thanks',
mod/river_comments/languages/en.php:			'river_comments:ping' => 'Yes, I want to help',
mod/river_comments/languages/en.php:			'river_comments:enable_ajaxsupport' => 'If you have problems with ajax, please disable this option',
mod/river_comments/languages/en.php:			'river_comments:admin:subtitle' => 'Do you like show the "comment" feature for...',
mod/river_comments/languages/en.php:			'river_comments:comment' => 'Comment',	
mod/river_comments/languages/en.php:			'river_comments:writeacomment' => 'Write a comment...',
mod/river_comments/languages/en.php:			'river_comments:viewallcomments' => 'View all %s comments',
mod/river_comments/languages/en.php:			'river_comments:allcommentsof' => 'All comments from "%s"',
mod/river_comments/languages/en.php:			'river_comments:notloginerror' => 'You are not logged in, please refresh the page.',
mod/river_comments/languages/en.php:			'river_comments:show:thewire' => 'the wire on the river?',
mod/river_comments/languages/en.php:			'river_comments:show:blog' => 'blog on the river?',
mod/river_comments/languages/en.php:			'river_comments:show:page' => 'page on the river?',
mod/river_comments/languages/en.php:			'river_comments:show:topic' => 'discussion topic on the river?',
mod/river_comments/languages/en.php:			'river_comments:show:tidypics_image'  => 'tidypics image on the river?',
mod/river_comments/languages/en.php:			'river_comments:show:tidypics_album'  => 'tidypics album on the river?',
mod/river_comments/languages/en.php:			'river_comments:show:izap_videos'  => 'izap videos on the river?',
mod/river_comments/languages/en.php:			'river_comments:show:event_calendar'  => 'event calendar page on the river?',
mod/river_comments/admin.php:	* river_comments
mod/river_comments/admin.php:	$plugin = find_plugin_settings('river_comments');
mod/river_comments/admin.php:	$form_body = elgg_view('settings/river_comments/edit', array('entity' => $plugin));
mod/river_comments/admin.php:	$form_body .= "<p>" . elgg_view('input/hidden', array('internalname' => 'plugin', 'value' => 'river_comments')) . $submit_button . "</p>";
mod/river_comments/admin.php:	$title = elgg_echo('river_comments:admin');
mod/river_comments/start.php:	* river_comments
mod/river_comments/start.php:	function river_comments_init() {
mod/river_comments/start.php:		register_page_handler('river_comments','river_comments_page_handler');
mod/river_comments/start.php:		extend_view('css', 'river_comments/css');
mod/river_comments/start.php:		extend_view('page_elements/footer', 'river_comments/footer', 400);
mod/river_comments/start.php:		extend_view('page_elements/footer', 'river_comments/js', 450);
mod/river_comments/start.php:		extend_view('riverdashboard/js', 'river_comments/riverdashboardjs');
mod/river_comments/start.php:		extend_view('river/item/actions', 'river_comments/item_action');
mod/river_comments/start.php:		extend_view('metatags', 'river_comments/version');
mod/river_comments/start.php:			extend_view('page_elements/header_contents', 'river_comments/question/content');
mod/river_comments/start.php:		register_action("comment",false, $CONFIG->pluginspath . "/river_comments/actions/comment.php");
mod/river_comments/start.php:		register_action("uncomment",false, $CONFIG->pluginspath . "/river_comments/actions/uncomment.php");
mod/river_comments/start.php:	function river_comments_page_handler($page) {
mod/river_comments/start.php:          		case "allcomments":
mod/river_comments/start.php:					!@include_once(dirname(__FILE__) . "/allcomments.php");
mod/river_comments/start.php:	function river_comments_setup() {
mod/river_comments/start.php:    		add_submenu_item(elgg_echo("river_comments:admin"), $CONFIG->wwwroot . "pg/river_comments/admin" );
mod/river_comments/start.php://		extend_view('river/user/default/profileiconupdate', 'river_comments/comments');
mod/river_comments/start.php://		extend_view('friends/river/create', 'river_comments/comments');
mod/river_comments/start.php://		extend_view('river/sitemessage/create', 'river_comments/comments');
mod/river_comments/start.php:		if (get_plugin_setting('show_thewire', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/object/thewire/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:		if (get_plugin_setting('show_blog', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/object/blog/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:		if (get_plugin_setting('show_page', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/object/page/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:		if (get_plugin_setting('show_topic', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/forum/topic/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:		if (is_plugin_enabled('tidypics') && get_plugin_setting('show_tidypics_image', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/object/image/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:		if (is_plugin_enabled('tidypics') && get_plugin_setting('show_tidypics_album', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/object/album/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:		if (is_plugin_enabled('izap_videos') && get_plugin_setting('show_izap_videos', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/object/izap_videos/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:		if (is_plugin_enabled('event_calendar') && get_plugin_setting('show_event_calendar', 'river_comments') != 'no') {
mod/river_comments/start.php:			extend_view('river/object/event_calendar/create', 'river_comments/comments', $priority);
mod/river_comments/start.php:	function river_comments_question_for_ping() {
mod/river_comments/start.php:	function river_comments_get_version($humanreadable = false){
mod/river_comments/start.php:	register_elgg_event_handler('init','system','river_comments_init');
mod/river_comments/start.php:	register_elgg_event_handler('pagesetup','system','river_comments_setup');
mod/river_comments/version.php:	* river_comments
mod/river_comments/version.php:	// YYYYMMDD = river_comments date
mod/messageboard/manifest.xml:	<description>This plugin allows users to put a message board on their profile for other users to post comments.</description>
mod/messageboard/languages/en.php:To view your message board comments, click here:
mod/messageboard/start.php: * to post comments.
vendors/markdown/markdown.php:# Change to false to remove Markdown from posts and/or comments.
vendors/markdown/markdown.php:			| # Special case for standalone HTML comments:
vendors/markdown/PHP Markdown Extra Readme.text:You can configure PHP Markdown to not apply to the comments on your 
vendors/markdown/PHP Markdown Extra Readme.text:By default, the Markdown plugin applies to both posts and comments on 
vendors/markdown/PHP Markdown Extra Readme.text:*	Fix for a problem introduced in 1.0.1g where posting comments in 
vendors/markdown/PHP Markdown Extra Readme.text:*	Changed the parsing of HTML comments to match simply from `<!--` to `-->` 
vendors/markdown/PHP Markdown Extra Readme.text:	This is how most browsers parse comments and how XML defines them too.
vendors/simpletest/README:the internet through a proxy server. See the comments in all_tests.php
vendors/simpletest/README:comments to...
vendors/simpletest/README:Thanks to everyone who has sent comments and offered suggestions. They
views/default/css/elements/components.php:.elgg-river-comments-tab {
views/default/css/elements/components.php:.elgg-river-comments {
views/default/css/elements/components.php:.elgg-river-comments li:first-child {
views/default/css/elements/components.php:.elgg-river-comments li:last-child {
views/default/css/elements/components.php:.elgg-river-comments li {
views/default/css/elements/components.php:.elgg-river-comments .elgg-media {
views/default/css/elements/components.php:	Comments (from elgg_view_comments)
views/default/css/elements/components.php:.elgg-comments {
views/default/css/elements/components.php:.elgg-comments > form {
views/default/page/elements/comments_block.php: * Display the latest related comments
views/default/page/elements/comments_block.php: * @uses $vars['limit']      The number of comments to display
views/default/page/elements/comments_block.php:$title = elgg_echo('generic_comments:latest');
views/default/page/elements/comments_block.php:$comments = elgg_get_annotations($options);
views/default/page/elements/comments_block.php:if ($comments) {
views/default/page/elements/comments_block.php:		'items' => $comments,
views/default/page/elements/comments_block.php:		'list_class' => 'elgg-latest-comments',
views/default/page/elements/comments.php: * List comments with optional add form
views/default/page/elements/comments.php:$class = 'elgg-comments';
views/default/page/elements/comments.php:	echo '<h3>' . elgg_echo('comments') . '</h3>';
views/default/page/elements/comments.php:	echo elgg_view_form('comments/add', array(), $vars);
views/default/river/elements/responses.php:// annotations do not have comments
views/default/river/elements/responses.php:$comments = elgg_get_annotations($options);
views/default/river/elements/responses.php:if ($comments) {
views/default/river/elements/responses.php:	// comments by sorting desc and limiting by 3, but we want to display
views/default/river/elements/responses.php:	// these comments with the latest at the bottom.
views/default/river/elements/responses.php:	$comments = array_reverse($comments);
views/default/river/elements/responses.php:	<span class="elgg-river-comments-tab"><?php echo elgg_echo('comments'); ?></span>
views/default/river/elements/responses.php:	echo elgg_view_annotation_list($comments, array('list_class' => 'elgg-river-comments'));
views/default/river/elements/responses.php:	if ($comment_count > count($comments)) {
views/default/river/elements/responses.php:		$num_more_comments = $comment_count - count($comments);
views/default/river/elements/responses.php:			'text' => elgg_echo('river:comments:more', array($num_more_comments)),
views/default/river/elements/responses.php:$form_vars = array('id' => "comments-add-{$object->getGUID()}", 'class' => 'hidden');
views/default/river/elements/responses.php:echo elgg_view_form('comments/add', $form_vars, $body_vars);
views/default/river/elements/body.php: * @uses $vars['responses']   Alternate respones (comments, replies, etc.)
views/default/forms/comments/add.php: * Elgg comments add form
views/default/forms/comments/add.php:		<label><?php echo elgg_echo("generic_comments:add"); ?></label>
views/default/forms/comments/add.php:		echo elgg_view('input/submit', array('value' => elgg_echo("generic_comments:post")));
views/rss/page/elements/comments.php: * RSS comments view
